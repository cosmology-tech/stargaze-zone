/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.34.0.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { UseQueryOptions, useQuery } from "@tanstack/react-query";
import { Expiration, Timestamp, Uint64, AllNftInfoResponse, OwnerOfResponse, Approval, NftInfoResponseForMetadata, Metadata, Trait, AllOperatorsResponse, AllTokensResponse, ApprovalResponse, ApprovalsResponse, Decimal, CollectionInfoResponse, RoyaltyInfoResponse, ContractInfoResponse, InstantiateMsg, CollectionInfoForRoyaltyInfoResponse, MinterResponse, NftInfoResponse, NumTokensResponse, OperatorsResponse, QueryMsg, TokensResponse } from "./SG721MetadataOnchain.types";
import { SG721MetadataOnchainQueryClient } from "./SG721MetadataOnchain.client";
export interface SG721MetadataOnchainReactQuery<TResponse, TData = TResponse> {
  client: SG721MetadataOnchainQueryClient;
  options?: Omit<UseQueryOptions<TResponse, Error, TData>, "'queryKey' | 'queryFn' | 'initialData'"> & {
    initialData?: undefined;
  };
}
export interface SG721MetadataOnchainCollectionInfoQuery<TData> extends SG721MetadataOnchainReactQuery<CollectionInfoResponse, TData> {}
export function useSG721MetadataOnchainCollectionInfoQuery<TData = CollectionInfoResponse>({
  client,
  options
}: SG721MetadataOnchainCollectionInfoQuery<TData>) {
  return useQuery<CollectionInfoResponse, Error, TData>(["sG721MetadataOnchainCollectionInfo", client.contractAddress], () => client.collectionInfo(), options);
}
export interface SG721MetadataOnchainMinterQuery<TData> extends SG721MetadataOnchainReactQuery<MinterResponse, TData> {}
export function useSG721MetadataOnchainMinterQuery<TData = MinterResponse>({
  client,
  options
}: SG721MetadataOnchainMinterQuery<TData>) {
  return useQuery<MinterResponse, Error, TData>(["sG721MetadataOnchainMinter", client.contractAddress], () => client.minter(), options);
}
export interface SG721MetadataOnchainAllTokensQuery<TData> extends SG721MetadataOnchainReactQuery<AllTokensResponse, TData> {
  args: {
    limit?: number;
    startAfter?: string;
  };
}
export function useSG721MetadataOnchainAllTokensQuery<TData = AllTokensResponse>({
  client,
  args,
  options
}: SG721MetadataOnchainAllTokensQuery<TData>) {
  return useQuery<AllTokensResponse, Error, TData>(["sG721MetadataOnchainAllTokens", client.contractAddress, JSON.stringify(args)], () => client.allTokens({
    limit: args.limit,
    startAfter: args.startAfter
  }), options);
}
export interface SG721MetadataOnchainTokensQuery<TData> extends SG721MetadataOnchainReactQuery<TokensResponse, TData> {
  args: {
    limit?: number;
    owner: string;
    startAfter?: string;
  };
}
export function useSG721MetadataOnchainTokensQuery<TData = TokensResponse>({
  client,
  args,
  options
}: SG721MetadataOnchainTokensQuery<TData>) {
  return useQuery<TokensResponse, Error, TData>(["sG721MetadataOnchainTokens", client.contractAddress, JSON.stringify(args)], () => client.tokens({
    limit: args.limit,
    owner: args.owner,
    startAfter: args.startAfter
  }), options);
}
export interface SG721MetadataOnchainAllNftInfoQuery<TData> extends SG721MetadataOnchainReactQuery<AllNftInfoResponse, TData> {
  args: {
    includeExpired?: boolean;
    tokenId: string;
  };
}
export function useSG721MetadataOnchainAllNftInfoQuery<TData = AllNftInfoResponse>({
  client,
  args,
  options
}: SG721MetadataOnchainAllNftInfoQuery<TData>) {
  return useQuery<AllNftInfoResponse, Error, TData>(["sG721MetadataOnchainAllNftInfo", client.contractAddress, JSON.stringify(args)], () => client.allNftInfo({
    includeExpired: args.includeExpired,
    tokenId: args.tokenId
  }), options);
}
export interface SG721MetadataOnchainNftInfoQuery<TData> extends SG721MetadataOnchainReactQuery<NftInfoResponse, TData> {
  args: {
    tokenId: string;
  };
}
export function useSG721MetadataOnchainNftInfoQuery<TData = NftInfoResponse>({
  client,
  args,
  options
}: SG721MetadataOnchainNftInfoQuery<TData>) {
  return useQuery<NftInfoResponse, Error, TData>(["sG721MetadataOnchainNftInfo", client.contractAddress, JSON.stringify(args)], () => client.nftInfo({
    tokenId: args.tokenId
  }), options);
}
export interface SG721MetadataOnchainContractInfoQuery<TData> extends SG721MetadataOnchainReactQuery<ContractInfoResponse, TData> {}
export function useSG721MetadataOnchainContractInfoQuery<TData = ContractInfoResponse>({
  client,
  options
}: SG721MetadataOnchainContractInfoQuery<TData>) {
  return useQuery<ContractInfoResponse, Error, TData>(["sG721MetadataOnchainContractInfo", client.contractAddress], () => client.contractInfo(), options);
}
export interface SG721MetadataOnchainNumTokensQuery<TData> extends SG721MetadataOnchainReactQuery<NumTokensResponse, TData> {}
export function useSG721MetadataOnchainNumTokensQuery<TData = NumTokensResponse>({
  client,
  options
}: SG721MetadataOnchainNumTokensQuery<TData>) {
  return useQuery<NumTokensResponse, Error, TData>(["sG721MetadataOnchainNumTokens", client.contractAddress], () => client.numTokens(), options);
}
export interface SG721MetadataOnchainAllOperatorsQuery<TData> extends SG721MetadataOnchainReactQuery<AllOperatorsResponse, TData> {
  args: {
    includeExpired?: boolean;
    limit?: number;
    owner: string;
    startAfter?: string;
  };
}
export function useSG721MetadataOnchainAllOperatorsQuery<TData = AllOperatorsResponse>({
  client,
  args,
  options
}: SG721MetadataOnchainAllOperatorsQuery<TData>) {
  return useQuery<AllOperatorsResponse, Error, TData>(["sG721MetadataOnchainAllOperators", client.contractAddress, JSON.stringify(args)], () => client.allOperators({
    includeExpired: args.includeExpired,
    limit: args.limit,
    owner: args.owner,
    startAfter: args.startAfter
  }), options);
}
export interface SG721MetadataOnchainApprovalsQuery<TData> extends SG721MetadataOnchainReactQuery<ApprovalsResponse, TData> {
  args: {
    includeExpired?: boolean;
    tokenId: string;
  };
}
export function useSG721MetadataOnchainApprovalsQuery<TData = ApprovalsResponse>({
  client,
  args,
  options
}: SG721MetadataOnchainApprovalsQuery<TData>) {
  return useQuery<ApprovalsResponse, Error, TData>(["sG721MetadataOnchainApprovals", client.contractAddress, JSON.stringify(args)], () => client.approvals({
    includeExpired: args.includeExpired,
    tokenId: args.tokenId
  }), options);
}
export interface SG721MetadataOnchainApprovalQuery<TData> extends SG721MetadataOnchainReactQuery<ApprovalResponse, TData> {
  args: {
    includeExpired?: boolean;
    spender: string;
    tokenId: string;
  };
}
export function useSG721MetadataOnchainApprovalQuery<TData = ApprovalResponse>({
  client,
  args,
  options
}: SG721MetadataOnchainApprovalQuery<TData>) {
  return useQuery<ApprovalResponse, Error, TData>(["sG721MetadataOnchainApproval", client.contractAddress, JSON.stringify(args)], () => client.approval({
    includeExpired: args.includeExpired,
    spender: args.spender,
    tokenId: args.tokenId
  }), options);
}
export interface SG721MetadataOnchainOwnerOfQuery<TData> extends SG721MetadataOnchainReactQuery<OwnerOfResponse, TData> {
  args: {
    includeExpired?: boolean;
    tokenId: string;
  };
}
export function useSG721MetadataOnchainOwnerOfQuery<TData = OwnerOfResponse>({
  client,
  args,
  options
}: SG721MetadataOnchainOwnerOfQuery<TData>) {
  return useQuery<OwnerOfResponse, Error, TData>(["sG721MetadataOnchainOwnerOf", client.contractAddress, JSON.stringify(args)], () => client.ownerOf({
    includeExpired: args.includeExpired,
    tokenId: args.tokenId
  }), options);
}
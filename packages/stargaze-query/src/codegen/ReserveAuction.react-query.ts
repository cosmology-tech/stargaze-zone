/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.34.0.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { UseQueryOptions, useQuery } from "react-query";
import { Uint128, InstantiateMsg, Coin, ExecuteMsg, Timestamp, Uint64, QueryMsg, QueryOptionsForTupleOfStringAndString, QueryOptionsForTupleOfuint64AndTupleOfStringAndString, Addr, AuctionResponse, Auction, HighBid, AuctionsResponse, ConfigResponse, Config } from "./ReserveAuction.types";
import { ReserveAuctionQueryClient } from "./ReserveAuction.client";
export interface ReserveAuctionReactQuery<TResponse, TData = TResponse> {
  client: ReserveAuctionQueryClient;
  options?: UseQueryOptions<TResponse, Error, TData>;
}
export interface ReserveAuctionAuctionsByEndTimeQuery<TData> extends ReserveAuctionReactQuery<AuctionsResponse, TData> {
  args: {
    endTime: Timestamp;
    queryOptions?: QueryOptionsForTupleOfuint64AndTupleOfStringAndString;
  };
}
export function useReserveAuctionAuctionsByEndTimeQuery<TData = AuctionsResponse>({
  client,
  args,
  options
}: ReserveAuctionAuctionsByEndTimeQuery<TData>) {
  return useQuery<AuctionsResponse, Error, TData>(["reserveAuctionAuctionsByEndTime", client.contractAddress, JSON.stringify(args)], () => client.auctionsByEndTime({
    endTime: args.endTime,
    queryOptions: args.queryOptions
  }), options);
}
export interface ReserveAuctionAuctionsBySellerQuery<TData> extends ReserveAuctionReactQuery<AuctionsResponse, TData> {
  args: {
    queryOptions?: QueryOptionsForTupleOfStringAndString;
    seller: string;
  };
}
export function useReserveAuctionAuctionsBySellerQuery<TData = AuctionsResponse>({
  client,
  args,
  options
}: ReserveAuctionAuctionsBySellerQuery<TData>) {
  return useQuery<AuctionsResponse, Error, TData>(["reserveAuctionAuctionsBySeller", client.contractAddress, JSON.stringify(args)], () => client.auctionsBySeller({
    queryOptions: args.queryOptions,
    seller: args.seller
  }), options);
}
export interface ReserveAuctionAuctionQuery<TData> extends ReserveAuctionReactQuery<AuctionResponse, TData> {
  args: {
    collection: string;
    tokenId: string;
  };
}
export function useReserveAuctionAuctionQuery<TData = AuctionResponse>({
  client,
  args,
  options
}: ReserveAuctionAuctionQuery<TData>) {
  return useQuery<AuctionResponse, Error, TData>(["reserveAuctionAuction", client.contractAddress, JSON.stringify(args)], () => client.auction({
    collection: args.collection,
    tokenId: args.tokenId
  }), options);
}
export interface ReserveAuctionConfigQuery<TData> extends ReserveAuctionReactQuery<ConfigResponse, TData> {}
export function useReserveAuctionConfigQuery<TData = ConfigResponse>({
  client,
  options
}: ReserveAuctionConfigQuery<TData>) {
  return useQuery<ConfigResponse, Error, TData>(["reserveAuctionConfig", client.contractAddress], () => client.config(), options);
}
/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.35.7.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { UseQueryOptions, useQuery } from "@tanstack/react-query";
import { Decimal, Timestamp, Uint64, Uint128, InstantiateMsg, CreateMinterMsgForVendingMinterInitMsgExtension, CollectionParams, CollectionInfoForRoyaltyInfoResponse, RoyaltyInfoResponse, VendingMinterInitMsgExtension, Coin, MinterParamsForParamsExtension, ParamsExtension, ExecuteMsg, QueryMsg, ConfigResponse, MintCountResponse, MintPriceResponse, MintableNumTokensResponse, StartTimeResponse, StatusResponse, Status } from "./VendingMinterWlFlex.types";
import { VendingMinterWlFlexQueryClient } from "./VendingMinterWlFlex.client";
export interface VendingMinterWlFlexReactQuery<TResponse, TData = TResponse> {
  client: VendingMinterWlFlexQueryClient;
  options?: Omit<UseQueryOptions<TResponse, Error, TData>, "'queryKey' | 'queryFn' | 'initialData'"> & {
    initialData?: undefined;
  };
}
export interface VendingMinterWlFlexStatusQuery<TData> extends VendingMinterWlFlexReactQuery<StatusResponse, TData> {}
export function useVendingMinterWlFlexStatusQuery<TData = StatusResponse>({
  client,
  options
}: VendingMinterWlFlexStatusQuery<TData>) {
  return useQuery<StatusResponse, Error, TData>(["vendingMinterWlFlexStatus", client.contractAddress], () => client.status(), options);
}
export interface VendingMinterWlFlexMintCountQuery<TData> extends VendingMinterWlFlexReactQuery<MintCountResponse, TData> {
  args: {
    address: string;
  };
}
export function useVendingMinterWlFlexMintCountQuery<TData = MintCountResponse>({
  client,
  args,
  options
}: VendingMinterWlFlexMintCountQuery<TData>) {
  return useQuery<MintCountResponse, Error, TData>(["vendingMinterWlFlexMintCount", client.contractAddress, JSON.stringify(args)], () => client.mintCount({
    address: args.address
  }), options);
}
export interface VendingMinterWlFlexMintPriceQuery<TData> extends VendingMinterWlFlexReactQuery<MintPriceResponse, TData> {}
export function useVendingMinterWlFlexMintPriceQuery<TData = MintPriceResponse>({
  client,
  options
}: VendingMinterWlFlexMintPriceQuery<TData>) {
  return useQuery<MintPriceResponse, Error, TData>(["vendingMinterWlFlexMintPrice", client.contractAddress], () => client.mintPrice(), options);
}
export interface VendingMinterWlFlexStartTimeQuery<TData> extends VendingMinterWlFlexReactQuery<StartTimeResponse, TData> {}
export function useVendingMinterWlFlexStartTimeQuery<TData = StartTimeResponse>({
  client,
  options
}: VendingMinterWlFlexStartTimeQuery<TData>) {
  return useQuery<StartTimeResponse, Error, TData>(["vendingMinterWlFlexStartTime", client.contractAddress], () => client.startTime(), options);
}
export interface VendingMinterWlFlexMintableNumTokensQuery<TData> extends VendingMinterWlFlexReactQuery<MintableNumTokensResponse, TData> {}
export function useVendingMinterWlFlexMintableNumTokensQuery<TData = MintableNumTokensResponse>({
  client,
  options
}: VendingMinterWlFlexMintableNumTokensQuery<TData>) {
  return useQuery<MintableNumTokensResponse, Error, TData>(["vendingMinterWlFlexMintableNumTokens", client.contractAddress], () => client.mintableNumTokens(), options);
}
export interface VendingMinterWlFlexConfigQuery<TData> extends VendingMinterWlFlexReactQuery<ConfigResponse, TData> {}
export function useVendingMinterWlFlexConfigQuery<TData = ConfigResponse>({
  client,
  options
}: VendingMinterWlFlexConfigQuery<TData>) {
  return useQuery<ConfigResponse, Error, TData>(["vendingMinterWlFlexConfig", client.contractAddress], () => client.config(), options);
}
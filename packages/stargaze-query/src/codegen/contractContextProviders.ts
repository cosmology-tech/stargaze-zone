/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.35.7.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { CosmWasmClient, SigningCosmWasmClient } from "@cosmjs/cosmwasm-stargate";
import { IQueryClientProvider, ISigningClientProvider, IMessageComposerProvider } from "./contractContextBase";
import { SG721BaseQueryClient } from "./SG721Base.client";
import { SG721Base } from "./SG721Base.provider";
import { SG721MetadataOnchainQueryClient } from "./SG721MetadataOnchain.client";
import { SG721MetadataOnchain } from "./SG721MetadataOnchain.provider";
import { Sg721UpdatableQueryClient } from "./Sg721Updatable.client";
import { Sg721UpdatableClient } from "./Sg721Updatable.client";
import { Sg721UpdatableMsgComposer } from "./Sg721Updatable.message-composer";
import { Sg721Updatable } from "./Sg721Updatable.provider";
import { BaseFactoryClient } from "./BaseFactory.client";
import { BaseFactoryMsgComposer } from "./BaseFactory.message-composer";
import { BaseFactory } from "./BaseFactory.provider";
import { BaseMinterClient } from "./BaseMinter.client";
import { BaseMinterMsgComposer } from "./BaseMinter.message-composer";
import { BaseMinter } from "./BaseMinter.provider";
import { VendingMinterQueryClient } from "./VendingMinter.client";
import { VendingMinterClient } from "./VendingMinter.client";
import { VendingMinterMsgComposer } from "./VendingMinter.message-composer";
import { VendingMinter } from "./VendingMinter.provider";
import { VendingMinterWlFlexQueryClient } from "./VendingMinterWlFlex.client";
import { VendingMinterWlFlexClient } from "./VendingMinterWlFlex.client";
import { VendingMinterWlFlexMsgComposer } from "./VendingMinterWlFlex.message-composer";
import { VendingMinterWlFlex } from "./VendingMinterWlFlex.provider";
import { SgEthAirdropQueryClient } from "./SgEthAirdrop.client";
import { SgEthAirdropClient } from "./SgEthAirdrop.client";
import { SgEthAirdropMsgComposer } from "./SgEthAirdrop.message-composer";
import { SgEthAirdrop } from "./SgEthAirdrop.provider";
import { SplitsQueryClient } from "./Splits.client";
import { SplitsClient } from "./Splits.client";
import { SplitsMsgComposer } from "./Splits.message-composer";
import { Splits } from "./Splits.provider";
import { WhitelistQueryClient } from "./Whitelist.client";
import { WhitelistClient } from "./Whitelist.client";
import { WhitelistMsgComposer } from "./Whitelist.message-composer";
import { Whitelist } from "./Whitelist.provider";
import { WhitelistFlexQueryClient } from "./WhitelistFlex.client";
import { WhitelistFlexClient } from "./WhitelistFlex.client";
import { WhitelistFlexMsgComposer } from "./WhitelistFlex.message-composer";
import { WhitelistFlex } from "./WhitelistFlex.provider";
import { WhitelistImmutableQueryClient } from "./WhitelistImmutable.client";
import { WhitelistImmutable } from "./WhitelistImmutable.provider";
import { MarketplaceQueryClient } from "./Marketplace.client";
import { MarketplaceClient } from "./Marketplace.client";
import { MarketplaceMsgComposer } from "./Marketplace.message-composer";
import { Marketplace } from "./Marketplace.provider";
import { ReserveAuctionQueryClient } from "./ReserveAuction.client";
import { ReserveAuctionClient } from "./ReserveAuction.client";
import { ReserveAuctionMsgComposer } from "./ReserveAuction.message-composer";
import { ReserveAuction } from "./ReserveAuction.provider";
export interface IContractsContext {
  sG721Base: IQueryClientProvider<SG721BaseQueryClient>;
  sG721MetadataOnchain: IQueryClientProvider<SG721MetadataOnchainQueryClient>;
  sg721Updatable: IQueryClientProvider<Sg721UpdatableQueryClient> & ISigningClientProvider<Sg721UpdatableClient> & IMessageComposerProvider<Sg721UpdatableMsgComposer>;
  baseFactory: ISigningClientProvider<BaseFactoryClient> & IMessageComposerProvider<BaseFactoryMsgComposer>;
  baseMinter: ISigningClientProvider<BaseMinterClient> & IMessageComposerProvider<BaseMinterMsgComposer>;
  vendingMinter: IQueryClientProvider<VendingMinterQueryClient> & ISigningClientProvider<VendingMinterClient> & IMessageComposerProvider<VendingMinterMsgComposer>;
  vendingMinterWlFlex: IQueryClientProvider<VendingMinterWlFlexQueryClient> & ISigningClientProvider<VendingMinterWlFlexClient> & IMessageComposerProvider<VendingMinterWlFlexMsgComposer>;
  sgEthAirdrop: IQueryClientProvider<SgEthAirdropQueryClient> & ISigningClientProvider<SgEthAirdropClient> & IMessageComposerProvider<SgEthAirdropMsgComposer>;
  splits: IQueryClientProvider<SplitsQueryClient> & ISigningClientProvider<SplitsClient> & IMessageComposerProvider<SplitsMsgComposer>;
  whitelist: IQueryClientProvider<WhitelistQueryClient> & ISigningClientProvider<WhitelistClient> & IMessageComposerProvider<WhitelistMsgComposer>;
  whitelistFlex: IQueryClientProvider<WhitelistFlexQueryClient> & ISigningClientProvider<WhitelistFlexClient> & IMessageComposerProvider<WhitelistFlexMsgComposer>;
  whitelistImmutable: IQueryClientProvider<WhitelistImmutableQueryClient>;
  marketplace: IQueryClientProvider<MarketplaceQueryClient> & ISigningClientProvider<MarketplaceClient> & IMessageComposerProvider<MarketplaceMsgComposer>;
  reserveAuction: IQueryClientProvider<ReserveAuctionQueryClient> & ISigningClientProvider<ReserveAuctionClient> & IMessageComposerProvider<ReserveAuctionMsgComposer>;
}
export const getProviders = (address?: string, cosmWasmClient?: CosmWasmClient, signingCosmWasmClient?: SigningCosmWasmClient) => ({
  sG721Base: new SG721Base({
    address,
    cosmWasmClient,
    signingCosmWasmClient
  }),
  sG721MetadataOnchain: new SG721MetadataOnchain({
    address,
    cosmWasmClient,
    signingCosmWasmClient
  }),
  sg721Updatable: new Sg721Updatable({
    address,
    cosmWasmClient,
    signingCosmWasmClient
  }),
  baseFactory: new BaseFactory({
    address,
    cosmWasmClient,
    signingCosmWasmClient
  }),
  baseMinter: new BaseMinter({
    address,
    cosmWasmClient,
    signingCosmWasmClient
  }),
  vendingMinter: new VendingMinter({
    address,
    cosmWasmClient,
    signingCosmWasmClient
  }),
  vendingMinterWlFlex: new VendingMinterWlFlex({
    address,
    cosmWasmClient,
    signingCosmWasmClient
  }),
  sgEthAirdrop: new SgEthAirdrop({
    address,
    cosmWasmClient,
    signingCosmWasmClient
  }),
  splits: new Splits({
    address,
    cosmWasmClient,
    signingCosmWasmClient
  }),
  whitelist: new Whitelist({
    address,
    cosmWasmClient,
    signingCosmWasmClient
  }),
  whitelistFlex: new WhitelistFlex({
    address,
    cosmWasmClient,
    signingCosmWasmClient
  }),
  whitelistImmutable: new WhitelistImmutable({
    address,
    cosmWasmClient,
    signingCosmWasmClient
  }),
  marketplace: new Marketplace({
    address,
    cosmWasmClient,
    signingCosmWasmClient
  }),
  reserveAuction: new ReserveAuction({
    address,
    cosmWasmClient,
    signingCosmWasmClient
  })
});
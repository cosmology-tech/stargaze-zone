/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.34.0.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { UseQueryOptions, useQuery } from "@tanstack/react-query";
import { Uint128, Timestamp, Uint64, ConfigResponse, Coin, ExecuteMsg, Decimal, InstantiateMsg, CreateMinterMsgForVendingMinterInitMsgExtension, CollectionParams, CollectionInfoForRoyaltyInfoResponse, RoyaltyInfoResponse, VendingMinterInitMsgExtension, MinterParamsForParamsExtension, ParamsExtension, MintCountResponse, MintPriceResponse, MintableNumTokensResponse, Addr, MinterConfigForConfigExtension, ConfigExtension, QueryMsg, StartTimeResponse, StatusResponse, Status } from "./VendingMinter.types";
import { VendingMinterQueryClient } from "./VendingMinter.client";
export interface VendingMinterReactQuery<TResponse, TData = TResponse> {
  client: VendingMinterQueryClient;
  options?: Omit<UseQueryOptions<TResponse, Error, TData>, "'queryKey' | 'queryFn' | 'initialData'"> & {
    initialData?: undefined;
  };
}
export interface VendingMinterStatusQuery<TData> extends VendingMinterReactQuery<StatusResponse, TData> {}
export function useVendingMinterStatusQuery<TData = StatusResponse>({
  client,
  options
}: VendingMinterStatusQuery<TData>) {
  return useQuery<StatusResponse, Error, TData>(["vendingMinterStatus", client.contractAddress], () => client.status(), options);
}
export interface VendingMinterMintCountQuery<TData> extends VendingMinterReactQuery<MintCountResponse, TData> {
  args: {
    address: string;
  };
}
export function useVendingMinterMintCountQuery<TData = MintCountResponse>({
  client,
  args,
  options
}: VendingMinterMintCountQuery<TData>) {
  return useQuery<MintCountResponse, Error, TData>(["vendingMinterMintCount", client.contractAddress, JSON.stringify(args)], () => client.mintCount({
    address: args.address
  }), options);
}
export interface VendingMinterMintPriceQuery<TData> extends VendingMinterReactQuery<MintPriceResponse, TData> {}
export function useVendingMinterMintPriceQuery<TData = MintPriceResponse>({
  client,
  options
}: VendingMinterMintPriceQuery<TData>) {
  return useQuery<MintPriceResponse, Error, TData>(["vendingMinterMintPrice", client.contractAddress], () => client.mintPrice(), options);
}
export interface VendingMinterStartTimeQuery<TData> extends VendingMinterReactQuery<StartTimeResponse, TData> {}
export function useVendingMinterStartTimeQuery<TData = StartTimeResponse>({
  client,
  options
}: VendingMinterStartTimeQuery<TData>) {
  return useQuery<StartTimeResponse, Error, TData>(["vendingMinterStartTime", client.contractAddress], () => client.startTime(), options);
}
export interface VendingMinterMintableNumTokensQuery<TData> extends VendingMinterReactQuery<MintableNumTokensResponse, TData> {}
export function useVendingMinterMintableNumTokensQuery<TData = MintableNumTokensResponse>({
  client,
  options
}: VendingMinterMintableNumTokensQuery<TData>) {
  return useQuery<MintableNumTokensResponse, Error, TData>(["vendingMinterMintableNumTokens", client.contractAddress], () => client.mintableNumTokens(), options);
}
export interface VendingMinterConfigQuery<TData> extends VendingMinterReactQuery<ConfigResponse, TData> {}
export function useVendingMinterConfigQuery<TData = ConfigResponse>({
  client,
  options
}: VendingMinterConfigQuery<TData>) {
  return useQuery<ConfigResponse, Error, TData>(["vendingMinterConfig", client.contractAddress], () => client.config(), options);
}
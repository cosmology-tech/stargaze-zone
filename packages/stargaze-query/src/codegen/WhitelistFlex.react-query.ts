/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.34.0.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { UseQueryOptions, useQuery } from "@tanstack/react-query";
import { Timestamp, Uint64, Uint128, InstantiateMsg, Member, Coin, ExecuteMsg, AddMembersMsg, RemoveMembersMsg, QueryMsg, CosmosMsgForEmpty, BankMsg, WasmMsg, Binary, Empty, AdminListResponse, CanExecuteResponse, ConfigResponse, HasEndedResponse, HasMemberResponse, HasStartedResponse, IsActiveResponse, MemberResponse, MembersResponse } from "./WhitelistFlex.types";
import { WhitelistFlexQueryClient } from "./WhitelistFlex.client";
export interface WhitelistFlexReactQuery<TResponse, TData = TResponse> {
  client: WhitelistFlexQueryClient;
  options?: Omit<UseQueryOptions<TResponse, Error, TData>, "'queryKey' | 'queryFn' | 'initialData'"> & {
    initialData?: undefined;
  };
}
export interface WhitelistFlexCanExecuteQuery<TData> extends WhitelistFlexReactQuery<CanExecuteResponse, TData> {
  args: {
    msg: CosmosMsgForEmpty;
    sender: string;
  };
}
export function useWhitelistFlexCanExecuteQuery<TData = CanExecuteResponse>({
  client,
  args,
  options
}: WhitelistFlexCanExecuteQuery<TData>) {
  return useQuery<CanExecuteResponse, Error, TData>(["whitelistFlexCanExecute", client.contractAddress, JSON.stringify(args)], () => client.canExecute({
    msg: args.msg,
    sender: args.sender
  }), options);
}
export interface WhitelistFlexAdminListQuery<TData> extends WhitelistFlexReactQuery<AdminListResponse, TData> {}
export function useWhitelistFlexAdminListQuery<TData = AdminListResponse>({
  client,
  options
}: WhitelistFlexAdminListQuery<TData>) {
  return useQuery<AdminListResponse, Error, TData>(["whitelistFlexAdminList", client.contractAddress], () => client.adminList(), options);
}
export interface WhitelistFlexConfigQuery<TData> extends WhitelistFlexReactQuery<ConfigResponse, TData> {}
export function useWhitelistFlexConfigQuery<TData = ConfigResponse>({
  client,
  options
}: WhitelistFlexConfigQuery<TData>) {
  return useQuery<ConfigResponse, Error, TData>(["whitelistFlexConfig", client.contractAddress], () => client.config(), options);
}
export interface WhitelistFlexMemberQuery<TData> extends WhitelistFlexReactQuery<MemberResponse, TData> {
  args: {
    member: string;
  };
}
export function useWhitelistFlexMemberQuery<TData = MemberResponse>({
  client,
  args,
  options
}: WhitelistFlexMemberQuery<TData>) {
  return useQuery<MemberResponse, Error, TData>(["whitelistFlexMember", client.contractAddress, JSON.stringify(args)], () => client.member({
    member: args.member
  }), options);
}
export interface WhitelistFlexHasMemberQuery<TData> extends WhitelistFlexReactQuery<HasMemberResponse, TData> {
  args: {
    member: string;
  };
}
export function useWhitelistFlexHasMemberQuery<TData = HasMemberResponse>({
  client,
  args,
  options
}: WhitelistFlexHasMemberQuery<TData>) {
  return useQuery<HasMemberResponse, Error, TData>(["whitelistFlexHasMember", client.contractAddress, JSON.stringify(args)], () => client.hasMember({
    member: args.member
  }), options);
}
export interface WhitelistFlexMembersQuery<TData> extends WhitelistFlexReactQuery<MembersResponse, TData> {
  args: {
    limit?: number;
    startAfter?: string;
  };
}
export function useWhitelistFlexMembersQuery<TData = MembersResponse>({
  client,
  args,
  options
}: WhitelistFlexMembersQuery<TData>) {
  return useQuery<MembersResponse, Error, TData>(["whitelistFlexMembers", client.contractAddress, JSON.stringify(args)], () => client.members({
    limit: args.limit,
    startAfter: args.startAfter
  }), options);
}
export interface WhitelistFlexIsActiveQuery<TData> extends WhitelistFlexReactQuery<IsActiveResponse, TData> {}
export function useWhitelistFlexIsActiveQuery<TData = IsActiveResponse>({
  client,
  options
}: WhitelistFlexIsActiveQuery<TData>) {
  return useQuery<IsActiveResponse, Error, TData>(["whitelistFlexIsActive", client.contractAddress], () => client.isActive(), options);
}
export interface WhitelistFlexHasEndedQuery<TData> extends WhitelistFlexReactQuery<HasEndedResponse, TData> {}
export function useWhitelistFlexHasEndedQuery<TData = HasEndedResponse>({
  client,
  options
}: WhitelistFlexHasEndedQuery<TData>) {
  return useQuery<HasEndedResponse, Error, TData>(["whitelistFlexHasEnded", client.contractAddress], () => client.hasEnded(), options);
}
export interface WhitelistFlexHasStartedQuery<TData> extends WhitelistFlexReactQuery<HasStartedResponse, TData> {}
export function useWhitelistFlexHasStartedQuery<TData = HasStartedResponse>({
  client,
  options
}: WhitelistFlexHasStartedQuery<TData>) {
  return useQuery<HasStartedResponse, Error, TData>(["whitelistFlexHasStarted", client.contractAddress], () => client.hasStarted(), options);
}
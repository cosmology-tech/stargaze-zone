/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.34.0.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { UseQueryOptions, useQuery } from "react-query";
import { Addr, InstantiateMsg, ExecuteMsg, QueryMsg, Boolean } from "./SgEthAirdrop.types";
import { SgEthAirdropQueryClient } from "./SgEthAirdrop.client";
export interface SgEthAirdropReactQuery<TResponse, TData = TResponse> {
  client: SgEthAirdropQueryClient;
  options?: UseQueryOptions<TResponse, Error, TData>;
}
export interface SgEthAirdropGetMinterQuery<TData> extends SgEthAirdropReactQuery<Addr, TData> {}
export function useSgEthAirdropGetMinterQuery<TData = Addr>({
  client,
  options
}: SgEthAirdropGetMinterQuery<TData>) {
  return useQuery<Addr, Error, TData>(["sgEthAirdropGetMinter", client.contractAddress], () => client.getMinter(), options);
}
export interface SgEthAirdropAirdropEligibleQuery<TData> extends SgEthAirdropReactQuery<Boolean, TData> {
  args: {
    ethAddress: string;
  };
}
export function useSgEthAirdropAirdropEligibleQuery<TData = Boolean>({
  client,
  args,
  options
}: SgEthAirdropAirdropEligibleQuery<TData>) {
  return useQuery<Boolean, Error, TData>(["sgEthAirdropAirdropEligible", client.contractAddress, JSON.stringify(args)], () => client.airdropEligible({
    ethAddress: args.ethAddress
  }), options);
}
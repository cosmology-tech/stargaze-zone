/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.35.7.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { UseQueryOptions, useQuery } from "@tanstack/react-query";
import { Uint128, Decimal, InstantiateMsg, Coin, ExecuteMsg, QueryMsg, QueryOptionsForMinReservePriceOffset, MinReservePriceOffset, QueryOptionsForAuctionKeyOffset, AuctionKeyOffset, NullableAuction, Addr, Timestamp, Uint64, Auction, HighBid, ArrayOfAuction, Config, HaltManager, HaltWindow, ArrayOfCoin } from "./ReserveAuction.types";
import { ReserveAuctionQueryClient } from "./ReserveAuction.client";
export interface ReserveAuctionReactQuery<TResponse, TData = TResponse> {
  client: ReserveAuctionQueryClient;
  options?: Omit<UseQueryOptions<TResponse, Error, TData>, "'queryKey' | 'queryFn' | 'initialData'"> & {
    initialData?: undefined;
  };
}
export interface ReserveAuctionAuctionsByEndTimeQuery<TData> extends ReserveAuctionReactQuery<ArrayOfAuction, TData> {
  args: {
    endTime: number;
    queryOptions?: QueryOptionsForAuctionKeyOffset;
  };
}
export function useReserveAuctionAuctionsByEndTimeQuery<TData = ArrayOfAuction>({
  client,
  args,
  options
}: ReserveAuctionAuctionsByEndTimeQuery<TData>) {
  return useQuery<ArrayOfAuction, Error, TData>(["reserveAuctionAuctionsByEndTime", client.contractAddress, JSON.stringify(args)], () => client.auctionsByEndTime({
    endTime: args.endTime,
    queryOptions: args.queryOptions
  }), options);
}
export interface ReserveAuctionAuctionsBySellerQuery<TData> extends ReserveAuctionReactQuery<ArrayOfAuction, TData> {
  args: {
    queryOptions?: QueryOptionsForAuctionKeyOffset;
    seller: string;
  };
}
export function useReserveAuctionAuctionsBySellerQuery<TData = ArrayOfAuction>({
  client,
  args,
  options
}: ReserveAuctionAuctionsBySellerQuery<TData>) {
  return useQuery<ArrayOfAuction, Error, TData>(["reserveAuctionAuctionsBySeller", client.contractAddress, JSON.stringify(args)], () => client.auctionsBySeller({
    queryOptions: args.queryOptions,
    seller: args.seller
  }), options);
}
export interface ReserveAuctionAuctionQuery<TData> extends ReserveAuctionReactQuery<NullableAuction, TData> {
  args: {
    collection: string;
    tokenId: string;
  };
}
export function useReserveAuctionAuctionQuery<TData = NullableAuction>({
  client,
  args,
  options
}: ReserveAuctionAuctionQuery<TData>) {
  return useQuery<NullableAuction, Error, TData>(["reserveAuctionAuction", client.contractAddress, JSON.stringify(args)], () => client.auction({
    collection: args.collection,
    tokenId: args.tokenId
  }), options);
}
export interface ReserveAuctionMinReservePricesQuery<TData> extends ReserveAuctionReactQuery<ArrayOfCoin, TData> {
  args: {
    queryOptions?: QueryOptionsForMinReservePriceOffset;
  };
}
export function useReserveAuctionMinReservePricesQuery<TData = ArrayOfCoin>({
  client,
  args,
  options
}: ReserveAuctionMinReservePricesQuery<TData>) {
  return useQuery<ArrayOfCoin, Error, TData>(["reserveAuctionMinReservePrices", client.contractAddress, JSON.stringify(args)], () => client.minReservePrices({
    queryOptions: args.queryOptions
  }), options);
}
export interface ReserveAuctionHaltManagerQuery<TData> extends ReserveAuctionReactQuery<HaltManager, TData> {}
export function useReserveAuctionHaltManagerQuery<TData = HaltManager>({
  client,
  options
}: ReserveAuctionHaltManagerQuery<TData>) {
  return useQuery<HaltManager, Error, TData>(["reserveAuctionHaltManager", client.contractAddress], () => client.haltManager(), options);
}
export interface ReserveAuctionConfigQuery<TData> extends ReserveAuctionReactQuery<Config, TData> {}
export function useReserveAuctionConfigQuery<TData = Config>({
  client,
  options
}: ReserveAuctionConfigQuery<TData>) {
  return useQuery<Config, Error, TData>(["reserveAuctionConfig", client.contractAddress], () => client.config(), options);
}
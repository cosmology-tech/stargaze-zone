/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.35.7.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { UseQueryOptions, useQuery } from "@tanstack/react-query";
import { Expiration, Timestamp, Uint64, AllNftInfoResponse, OwnerOfResponse, Approval, NftInfoResponseForEmpty, Empty, AllOperatorsResponse, AllTokensResponse, ApprovalResponse, ApprovalsResponse, Decimal, CollectionInfoResponse, RoyaltyInfoResponse, ContractInfoResponse, InstantiateMsg, CollectionInfoForRoyaltyInfoResponse, MinterResponse, NftInfoResponse, NumTokensResponse, OperatorsResponse, QueryMsg, TokensResponse } from "./SG721Base.types";
import { SG721BaseQueryClient } from "./SG721Base.client";
export interface SG721BaseReactQuery<TResponse, TData = TResponse> {
  client: SG721BaseQueryClient;
  options?: Omit<UseQueryOptions<TResponse, Error, TData>, "'queryKey' | 'queryFn' | 'initialData'"> & {
    initialData?: undefined;
  };
}
export interface SG721BaseOwnershipQuery<TData> extends SG721BaseReactQuery<OwnershipResponse, TData> {}
export function useSG721BaseOwnershipQuery<TData = OwnershipResponse>({
  client,
  options
}: SG721BaseOwnershipQuery<TData>) {
  return useQuery<OwnershipResponse, Error, TData>(["sG721BaseOwnership", client.contractAddress], () => client.ownership(), options);
}
export interface SG721BaseCollectionInfoQuery<TData> extends SG721BaseReactQuery<CollectionInfoResponse, TData> {}
export function useSG721BaseCollectionInfoQuery<TData = CollectionInfoResponse>({
  client,
  options
}: SG721BaseCollectionInfoQuery<TData>) {
  return useQuery<CollectionInfoResponse, Error, TData>(["sG721BaseCollectionInfo", client.contractAddress], () => client.collectionInfo(), options);
}
export interface SG721BaseMinterQuery<TData> extends SG721BaseReactQuery<MinterResponse, TData> {}
export function useSG721BaseMinterQuery<TData = MinterResponse>({
  client,
  options
}: SG721BaseMinterQuery<TData>) {
  return useQuery<MinterResponse, Error, TData>(["sG721BaseMinter", client.contractAddress], () => client.minter(), options);
}
export interface SG721BaseAllTokensQuery<TData> extends SG721BaseReactQuery<AllTokensResponse, TData> {
  args: {
    limit?: number;
    startAfter?: string;
  };
}
export function useSG721BaseAllTokensQuery<TData = AllTokensResponse>({
  client,
  args,
  options
}: SG721BaseAllTokensQuery<TData>) {
  return useQuery<AllTokensResponse, Error, TData>(["sG721BaseAllTokens", client.contractAddress, JSON.stringify(args)], () => client.allTokens({
    limit: args.limit,
    startAfter: args.startAfter
  }), options);
}
export interface SG721BaseTokensQuery<TData> extends SG721BaseReactQuery<TokensResponse, TData> {
  args: {
    limit?: number;
    owner: string;
    startAfter?: string;
  };
}
export function useSG721BaseTokensQuery<TData = TokensResponse>({
  client,
  args,
  options
}: SG721BaseTokensQuery<TData>) {
  return useQuery<TokensResponse, Error, TData>(["sG721BaseTokens", client.contractAddress, JSON.stringify(args)], () => client.tokens({
    limit: args.limit,
    owner: args.owner,
    startAfter: args.startAfter
  }), options);
}
export interface SG721BaseAllNftInfoQuery<TData> extends SG721BaseReactQuery<AllNftInfoResponse, TData> {
  args: {
    includeExpired?: boolean;
    tokenId: string;
  };
}
export function useSG721BaseAllNftInfoQuery<TData = AllNftInfoResponse>({
  client,
  args,
  options
}: SG721BaseAllNftInfoQuery<TData>) {
  return useQuery<AllNftInfoResponse, Error, TData>(["sG721BaseAllNftInfo", client.contractAddress, JSON.stringify(args)], () => client.allNftInfo({
    includeExpired: args.includeExpired,
    tokenId: args.tokenId
  }), options);
}
export interface SG721BaseNftInfoQuery<TData> extends SG721BaseReactQuery<NftInfoResponse, TData> {
  args: {
    tokenId: string;
  };
}
export function useSG721BaseNftInfoQuery<TData = NftInfoResponse>({
  client,
  args,
  options
}: SG721BaseNftInfoQuery<TData>) {
  return useQuery<NftInfoResponse, Error, TData>(["sG721BaseNftInfo", client.contractAddress, JSON.stringify(args)], () => client.nftInfo({
    tokenId: args.tokenId
  }), options);
}
export interface SG721BaseContractInfoQuery<TData> extends SG721BaseReactQuery<ContractInfoResponse, TData> {}
export function useSG721BaseContractInfoQuery<TData = ContractInfoResponse>({
  client,
  options
}: SG721BaseContractInfoQuery<TData>) {
  return useQuery<ContractInfoResponse, Error, TData>(["sG721BaseContractInfo", client.contractAddress], () => client.contractInfo(), options);
}
export interface SG721BaseNumTokensQuery<TData> extends SG721BaseReactQuery<NumTokensResponse, TData> {}
export function useSG721BaseNumTokensQuery<TData = NumTokensResponse>({
  client,
  options
}: SG721BaseNumTokensQuery<TData>) {
  return useQuery<NumTokensResponse, Error, TData>(["sG721BaseNumTokens", client.contractAddress], () => client.numTokens(), options);
}
export interface SG721BaseAllOperatorsQuery<TData> extends SG721BaseReactQuery<AllOperatorsResponse, TData> {
  args: {
    includeExpired?: boolean;
    limit?: number;
    owner: string;
    startAfter?: string;
  };
}
export function useSG721BaseAllOperatorsQuery<TData = AllOperatorsResponse>({
  client,
  args,
  options
}: SG721BaseAllOperatorsQuery<TData>) {
  return useQuery<AllOperatorsResponse, Error, TData>(["sG721BaseAllOperators", client.contractAddress, JSON.stringify(args)], () => client.allOperators({
    includeExpired: args.includeExpired,
    limit: args.limit,
    owner: args.owner,
    startAfter: args.startAfter
  }), options);
}
export interface SG721BaseApprovalsQuery<TData> extends SG721BaseReactQuery<ApprovalsResponse, TData> {
  args: {
    includeExpired?: boolean;
    tokenId: string;
  };
}
export function useSG721BaseApprovalsQuery<TData = ApprovalsResponse>({
  client,
  args,
  options
}: SG721BaseApprovalsQuery<TData>) {
  return useQuery<ApprovalsResponse, Error, TData>(["sG721BaseApprovals", client.contractAddress, JSON.stringify(args)], () => client.approvals({
    includeExpired: args.includeExpired,
    tokenId: args.tokenId
  }), options);
}
export interface SG721BaseApprovalQuery<TData> extends SG721BaseReactQuery<ApprovalResponse, TData> {
  args: {
    includeExpired?: boolean;
    spender: string;
    tokenId: string;
  };
}
export function useSG721BaseApprovalQuery<TData = ApprovalResponse>({
  client,
  args,
  options
}: SG721BaseApprovalQuery<TData>) {
  return useQuery<ApprovalResponse, Error, TData>(["sG721BaseApproval", client.contractAddress, JSON.stringify(args)], () => client.approval({
    includeExpired: args.includeExpired,
    spender: args.spender,
    tokenId: args.tokenId
  }), options);
}
export interface SG721BaseOwnerOfQuery<TData> extends SG721BaseReactQuery<OwnerOfResponse, TData> {
  args: {
    includeExpired?: boolean;
    tokenId: string;
  };
}
export function useSG721BaseOwnerOfQuery<TData = OwnerOfResponse>({
  client,
  args,
  options
}: SG721BaseOwnerOfQuery<TData>) {
  return useQuery<OwnerOfResponse, Error, TData>(["sG721BaseOwnerOf", client.contractAddress, JSON.stringify(args)], () => client.ownerOf({
    includeExpired: args.includeExpired,
    tokenId: args.tokenId
  }), options);
}
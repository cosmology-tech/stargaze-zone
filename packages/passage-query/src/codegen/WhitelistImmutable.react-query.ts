/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.35.7.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { UseQueryOptions, useQuery } from "@tanstack/react-query";
import { InstantiateMsg, ExecuteMsg, QueryMsg, Uint64, Addr, ConfigResponse, Config, Boolean, PerAddressLimitResponse } from "./WhitelistImmutable.types";
import { WhitelistImmutableQueryClient } from "./WhitelistImmutable.client";
export interface WhitelistImmutableReactQuery<TResponse, TData = TResponse> {
  client: WhitelistImmutableQueryClient;
  options?: Omit<UseQueryOptions<TResponse, Error, TData>, "'queryKey' | 'queryFn' | 'initialData'"> & {
    initialData?: undefined;
  };
}
export interface WhitelistImmutablePerAddressLimitQuery<TData> extends WhitelistImmutableReactQuery<PerAddressLimitResponse, TData> {}
export function useWhitelistImmutablePerAddressLimitQuery<TData = PerAddressLimitResponse>({
  client,
  options
}: WhitelistImmutablePerAddressLimitQuery<TData>) {
  return useQuery<PerAddressLimitResponse, Error, TData>(["whitelistImmutablePerAddressLimit", client.contractAddress], () => client.perAddressLimit(), options);
}
export interface WhitelistImmutableAddressCountQuery<TData> extends WhitelistImmutableReactQuery<Uint64, TData> {}
export function useWhitelistImmutableAddressCountQuery<TData = Uint64>({
  client,
  options
}: WhitelistImmutableAddressCountQuery<TData>) {
  return useQuery<Uint64, Error, TData>(["whitelistImmutableAddressCount", client.contractAddress], () => client.addressCount(), options);
}
export interface WhitelistImmutableAdminQuery<TData> extends WhitelistImmutableReactQuery<Uint64, TData> {}
export function useWhitelistImmutableAdminQuery<TData = Uint64>({
  client,
  options
}: WhitelistImmutableAdminQuery<TData>) {
  return useQuery<Uint64, Error, TData>(["whitelistImmutableAdmin", client.contractAddress], () => client.admin(), options);
}
export interface WhitelistImmutableIncludesAddressQuery<TData> extends WhitelistImmutableReactQuery<Boolean, TData> {
  args: {
    address: string;
  };
}
export function useWhitelistImmutableIncludesAddressQuery<TData = Boolean>({
  client,
  args,
  options
}: WhitelistImmutableIncludesAddressQuery<TData>) {
  return useQuery<Boolean, Error, TData>(["whitelistImmutableIncludesAddress", client.contractAddress, JSON.stringify(args)], () => client.includesAddress({
    address: args.address
  }), options);
}
export interface WhitelistImmutableConfigQuery<TData> extends WhitelistImmutableReactQuery<ConfigResponse, TData> {}
export function useWhitelistImmutableConfigQuery<TData = ConfigResponse>({
  client,
  options
}: WhitelistImmutableConfigQuery<TData>) {
  return useQuery<ConfigResponse, Error, TData>(["whitelistImmutableConfig", client.contractAddress], () => client.config(), options);
}
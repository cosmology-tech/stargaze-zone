/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.34.0.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/
import { UseQueryOptions } from "@tanstack/react-query";
import { AdminListResponse, CanExecuteResponse, ConfigResponse, HasEndedResponse, HasMemberResponse, HasStartedResponse, IsActiveResponse, MembersResponse, CosmosMsgForEmpty } from "./Whitelist.types";
import { WhitelistQueryClient } from "./Whitelist.client";
export interface WhitelistReactQuery<TResponse, TData = TResponse> {
    client: WhitelistQueryClient;
    options?: Omit<UseQueryOptions<TResponse, Error, TData>, "'queryKey' | 'queryFn' | 'initialData'"> & {
        initialData?: undefined;
    };
}
export interface WhitelistCanExecuteQuery<TData> extends WhitelistReactQuery<CanExecuteResponse, TData> {
    args: {
        msg: CosmosMsgForEmpty;
        sender: string;
    };
}
export declare function useWhitelistCanExecuteQuery<TData = CanExecuteResponse>({ client, args, options }: WhitelistCanExecuteQuery<TData>): import("@tanstack/react-query").UseQueryResult<TData, Error>;
export interface WhitelistAdminListQuery<TData> extends WhitelistReactQuery<AdminListResponse, TData> {
}
export declare function useWhitelistAdminListQuery<TData = AdminListResponse>({ client, options }: WhitelistAdminListQuery<TData>): import("@tanstack/react-query").UseQueryResult<TData, Error>;
export interface WhitelistConfigQuery<TData> extends WhitelistReactQuery<ConfigResponse, TData> {
}
export declare function useWhitelistConfigQuery<TData = ConfigResponse>({ client, options }: WhitelistConfigQuery<TData>): import("@tanstack/react-query").UseQueryResult<TData, Error>;
export interface WhitelistHasMemberQuery<TData> extends WhitelistReactQuery<HasMemberResponse, TData> {
    args: {
        member: string;
    };
}
export declare function useWhitelistHasMemberQuery<TData = HasMemberResponse>({ client, args, options }: WhitelistHasMemberQuery<TData>): import("@tanstack/react-query").UseQueryResult<TData, Error>;
export interface WhitelistMembersQuery<TData> extends WhitelistReactQuery<MembersResponse, TData> {
    args: {
        limit?: number;
        startAfter?: string;
    };
}
export declare function useWhitelistMembersQuery<TData = MembersResponse>({ client, args, options }: WhitelistMembersQuery<TData>): import("@tanstack/react-query").UseQueryResult<TData, Error>;
export interface WhitelistIsActiveQuery<TData> extends WhitelistReactQuery<IsActiveResponse, TData> {
}
export declare function useWhitelistIsActiveQuery<TData = IsActiveResponse>({ client, options }: WhitelistIsActiveQuery<TData>): import("@tanstack/react-query").UseQueryResult<TData, Error>;
export interface WhitelistHasEndedQuery<TData> extends WhitelistReactQuery<HasEndedResponse, TData> {
}
export declare function useWhitelistHasEndedQuery<TData = HasEndedResponse>({ client, options }: WhitelistHasEndedQuery<TData>): import("@tanstack/react-query").UseQueryResult<TData, Error>;
export interface WhitelistHasStartedQuery<TData> extends WhitelistReactQuery<HasStartedResponse, TData> {
}
export declare function useWhitelistHasStartedQuery<TData = HasStartedResponse>({ client, options }: WhitelistHasStartedQuery<TData>): import("@tanstack/react-query").UseQueryResult<TData, Error>;

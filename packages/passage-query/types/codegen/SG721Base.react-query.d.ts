/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.34.0.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/
import { UseQueryOptions } from "@tanstack/react-query";
import { AllNftInfoResponse, OwnerOfResponse, AllOperatorsResponse, AllTokensResponse, ApprovalResponse, ApprovalsResponse, CollectionInfoResponse, ContractInfoResponse, MinterResponse, NftInfoResponse, NumTokensResponse, TokensResponse } from "./SG721Base.types";
import { SG721BaseQueryClient } from "./SG721Base.client";
export interface SG721BaseReactQuery<TResponse, TData = TResponse> {
    client: SG721BaseQueryClient;
    options?: Omit<UseQueryOptions<TResponse, Error, TData>, "'queryKey' | 'queryFn' | 'initialData'"> & {
        initialData?: undefined;
    };
}
export interface SG721BaseCollectionInfoQuery<TData> extends SG721BaseReactQuery<CollectionInfoResponse, TData> {
}
export declare function useSG721BaseCollectionInfoQuery<TData = CollectionInfoResponse>({ client, options }: SG721BaseCollectionInfoQuery<TData>): import("@tanstack/react-query").UseQueryResult<TData, Error>;
export interface SG721BaseMinterQuery<TData> extends SG721BaseReactQuery<MinterResponse, TData> {
}
export declare function useSG721BaseMinterQuery<TData = MinterResponse>({ client, options }: SG721BaseMinterQuery<TData>): import("@tanstack/react-query").UseQueryResult<TData, Error>;
export interface SG721BaseAllTokensQuery<TData> extends SG721BaseReactQuery<AllTokensResponse, TData> {
    args: {
        limit?: number;
        startAfter?: string;
    };
}
export declare function useSG721BaseAllTokensQuery<TData = AllTokensResponse>({ client, args, options }: SG721BaseAllTokensQuery<TData>): import("@tanstack/react-query").UseQueryResult<TData, Error>;
export interface SG721BaseTokensQuery<TData> extends SG721BaseReactQuery<TokensResponse, TData> {
    args: {
        limit?: number;
        owner: string;
        startAfter?: string;
    };
}
export declare function useSG721BaseTokensQuery<TData = TokensResponse>({ client, args, options }: SG721BaseTokensQuery<TData>): import("@tanstack/react-query").UseQueryResult<TData, Error>;
export interface SG721BaseAllNftInfoQuery<TData> extends SG721BaseReactQuery<AllNftInfoResponse, TData> {
    args: {
        includeExpired?: boolean;
        tokenId: string;
    };
}
export declare function useSG721BaseAllNftInfoQuery<TData = AllNftInfoResponse>({ client, args, options }: SG721BaseAllNftInfoQuery<TData>): import("@tanstack/react-query").UseQueryResult<TData, Error>;
export interface SG721BaseNftInfoQuery<TData> extends SG721BaseReactQuery<NftInfoResponse, TData> {
    args: {
        tokenId: string;
    };
}
export declare function useSG721BaseNftInfoQuery<TData = NftInfoResponse>({ client, args, options }: SG721BaseNftInfoQuery<TData>): import("@tanstack/react-query").UseQueryResult<TData, Error>;
export interface SG721BaseContractInfoQuery<TData> extends SG721BaseReactQuery<ContractInfoResponse, TData> {
}
export declare function useSG721BaseContractInfoQuery<TData = ContractInfoResponse>({ client, options }: SG721BaseContractInfoQuery<TData>): import("@tanstack/react-query").UseQueryResult<TData, Error>;
export interface SG721BaseNumTokensQuery<TData> extends SG721BaseReactQuery<NumTokensResponse, TData> {
}
export declare function useSG721BaseNumTokensQuery<TData = NumTokensResponse>({ client, options }: SG721BaseNumTokensQuery<TData>): import("@tanstack/react-query").UseQueryResult<TData, Error>;
export interface SG721BaseAllOperatorsQuery<TData> extends SG721BaseReactQuery<AllOperatorsResponse, TData> {
    args: {
        includeExpired?: boolean;
        limit?: number;
        owner: string;
        startAfter?: string;
    };
}
export declare function useSG721BaseAllOperatorsQuery<TData = AllOperatorsResponse>({ client, args, options }: SG721BaseAllOperatorsQuery<TData>): import("@tanstack/react-query").UseQueryResult<TData, Error>;
export interface SG721BaseApprovalsQuery<TData> extends SG721BaseReactQuery<ApprovalsResponse, TData> {
    args: {
        includeExpired?: boolean;
        tokenId: string;
    };
}
export declare function useSG721BaseApprovalsQuery<TData = ApprovalsResponse>({ client, args, options }: SG721BaseApprovalsQuery<TData>): import("@tanstack/react-query").UseQueryResult<TData, Error>;
export interface SG721BaseApprovalQuery<TData> extends SG721BaseReactQuery<ApprovalResponse, TData> {
    args: {
        includeExpired?: boolean;
        spender: string;
        tokenId: string;
    };
}
export declare function useSG721BaseApprovalQuery<TData = ApprovalResponse>({ client, args, options }: SG721BaseApprovalQuery<TData>): import("@tanstack/react-query").UseQueryResult<TData, Error>;
export interface SG721BaseOwnerOfQuery<TData> extends SG721BaseReactQuery<OwnerOfResponse, TData> {
    args: {
        includeExpired?: boolean;
        tokenId: string;
    };
}
export declare function useSG721BaseOwnerOfQuery<TData = OwnerOfResponse>({ client, args, options }: SG721BaseOwnerOfQuery<TData>): import("@tanstack/react-query").UseQueryResult<TData, Error>;

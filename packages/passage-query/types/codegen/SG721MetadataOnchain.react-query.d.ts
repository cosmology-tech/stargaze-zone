/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.34.0.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/
import { UseQueryOptions } from "@tanstack/react-query";
import { AllNftInfoResponse, OwnerOfResponse, AllOperatorsResponse, AllTokensResponse, ApprovalResponse, ApprovalsResponse, CollectionInfoResponse, ContractInfoResponse, MinterResponse, NftInfoResponse, NumTokensResponse, TokensResponse } from "./SG721MetadataOnchain.types";
import { SG721MetadataOnchainQueryClient } from "./SG721MetadataOnchain.client";
export interface SG721MetadataOnchainReactQuery<TResponse, TData = TResponse> {
    client: SG721MetadataOnchainQueryClient;
    options?: Omit<UseQueryOptions<TResponse, Error, TData>, "'queryKey' | 'queryFn' | 'initialData'"> & {
        initialData?: undefined;
    };
}
export interface SG721MetadataOnchainCollectionInfoQuery<TData> extends SG721MetadataOnchainReactQuery<CollectionInfoResponse, TData> {
}
export declare function useSG721MetadataOnchainCollectionInfoQuery<TData = CollectionInfoResponse>({ client, options }: SG721MetadataOnchainCollectionInfoQuery<TData>): import("@tanstack/react-query").UseQueryResult<TData, Error>;
export interface SG721MetadataOnchainMinterQuery<TData> extends SG721MetadataOnchainReactQuery<MinterResponse, TData> {
}
export declare function useSG721MetadataOnchainMinterQuery<TData = MinterResponse>({ client, options }: SG721MetadataOnchainMinterQuery<TData>): import("@tanstack/react-query").UseQueryResult<TData, Error>;
export interface SG721MetadataOnchainAllTokensQuery<TData> extends SG721MetadataOnchainReactQuery<AllTokensResponse, TData> {
    args: {
        limit?: number;
        startAfter?: string;
    };
}
export declare function useSG721MetadataOnchainAllTokensQuery<TData = AllTokensResponse>({ client, args, options }: SG721MetadataOnchainAllTokensQuery<TData>): import("@tanstack/react-query").UseQueryResult<TData, Error>;
export interface SG721MetadataOnchainTokensQuery<TData> extends SG721MetadataOnchainReactQuery<TokensResponse, TData> {
    args: {
        limit?: number;
        owner: string;
        startAfter?: string;
    };
}
export declare function useSG721MetadataOnchainTokensQuery<TData = TokensResponse>({ client, args, options }: SG721MetadataOnchainTokensQuery<TData>): import("@tanstack/react-query").UseQueryResult<TData, Error>;
export interface SG721MetadataOnchainAllNftInfoQuery<TData> extends SG721MetadataOnchainReactQuery<AllNftInfoResponse, TData> {
    args: {
        includeExpired?: boolean;
        tokenId: string;
    };
}
export declare function useSG721MetadataOnchainAllNftInfoQuery<TData = AllNftInfoResponse>({ client, args, options }: SG721MetadataOnchainAllNftInfoQuery<TData>): import("@tanstack/react-query").UseQueryResult<TData, Error>;
export interface SG721MetadataOnchainNftInfoQuery<TData> extends SG721MetadataOnchainReactQuery<NftInfoResponse, TData> {
    args: {
        tokenId: string;
    };
}
export declare function useSG721MetadataOnchainNftInfoQuery<TData = NftInfoResponse>({ client, args, options }: SG721MetadataOnchainNftInfoQuery<TData>): import("@tanstack/react-query").UseQueryResult<TData, Error>;
export interface SG721MetadataOnchainContractInfoQuery<TData> extends SG721MetadataOnchainReactQuery<ContractInfoResponse, TData> {
}
export declare function useSG721MetadataOnchainContractInfoQuery<TData = ContractInfoResponse>({ client, options }: SG721MetadataOnchainContractInfoQuery<TData>): import("@tanstack/react-query").UseQueryResult<TData, Error>;
export interface SG721MetadataOnchainNumTokensQuery<TData> extends SG721MetadataOnchainReactQuery<NumTokensResponse, TData> {
}
export declare function useSG721MetadataOnchainNumTokensQuery<TData = NumTokensResponse>({ client, options }: SG721MetadataOnchainNumTokensQuery<TData>): import("@tanstack/react-query").UseQueryResult<TData, Error>;
export interface SG721MetadataOnchainAllOperatorsQuery<TData> extends SG721MetadataOnchainReactQuery<AllOperatorsResponse, TData> {
    args: {
        includeExpired?: boolean;
        limit?: number;
        owner: string;
        startAfter?: string;
    };
}
export declare function useSG721MetadataOnchainAllOperatorsQuery<TData = AllOperatorsResponse>({ client, args, options }: SG721MetadataOnchainAllOperatorsQuery<TData>): import("@tanstack/react-query").UseQueryResult<TData, Error>;
export interface SG721MetadataOnchainApprovalsQuery<TData> extends SG721MetadataOnchainReactQuery<ApprovalsResponse, TData> {
    args: {
        includeExpired?: boolean;
        tokenId: string;
    };
}
export declare function useSG721MetadataOnchainApprovalsQuery<TData = ApprovalsResponse>({ client, args, options }: SG721MetadataOnchainApprovalsQuery<TData>): import("@tanstack/react-query").UseQueryResult<TData, Error>;
export interface SG721MetadataOnchainApprovalQuery<TData> extends SG721MetadataOnchainReactQuery<ApprovalResponse, TData> {
    args: {
        includeExpired?: boolean;
        spender: string;
        tokenId: string;
    };
}
export declare function useSG721MetadataOnchainApprovalQuery<TData = ApprovalResponse>({ client, args, options }: SG721MetadataOnchainApprovalQuery<TData>): import("@tanstack/react-query").UseQueryResult<TData, Error>;
export interface SG721MetadataOnchainOwnerOfQuery<TData> extends SG721MetadataOnchainReactQuery<OwnerOfResponse, TData> {
    args: {
        includeExpired?: boolean;
        tokenId: string;
    };
}
export declare function useSG721MetadataOnchainOwnerOfQuery<TData = OwnerOfResponse>({ client, args, options }: SG721MetadataOnchainOwnerOfQuery<TData>): import("@tanstack/react-query").UseQueryResult<TData, Error>;

/**
* This file was automatically generated by @cosmwasm/ts-codegen@1.11.1.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/
import { MsgExecuteContractEncodeObject } from "@cosmjs/cosmwasm-stargate";
import { Timestamp, Uint128, Coin } from "./AuctionEnglish.types";
export interface AuctionEnglishMsg {
    contractAddress: string;
    sender: string;
    updateConfig: ({ bufferDuration, closedDuration, collectorAddress, maxDuration, minBidIncrement, minDuration, minPrice, operators, tradingFeeBps }: {
        bufferDuration?: number;
        closedDuration?: number;
        collectorAddress?: string;
        maxDuration?: number;
        minBidIncrement?: Uint128;
        minDuration?: number;
        minPrice?: Uint128;
        operators?: string[];
        tradingFeeBps?: number;
    }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
    setAuction: ({ endTime, fundsRecipient, reservePrice, startTime, startingPrice, tokenId }: {
        endTime: Timestamp;
        fundsRecipient?: string;
        reservePrice?: Coin;
        startTime: Timestamp;
        startingPrice: Coin;
        tokenId: string;
    }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
    setAuctionBid: ({ price, tokenId }: {
        price: Coin;
        tokenId: string;
    }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
    closeAuction: ({ acceptHighestBid, tokenId }: {
        acceptHighestBid: boolean;
        tokenId: string;
    }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
    finalizeAuction: ({ tokenId }: {
        tokenId: string;
    }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
    voidAuction: ({ tokenId }: {
        tokenId: string;
    }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
}
export declare class AuctionEnglishMsgComposer implements AuctionEnglishMsg {
    sender: string;
    contractAddress: string;
    constructor(sender: string, contractAddress: string);
    updateConfig: ({ bufferDuration, closedDuration, collectorAddress, maxDuration, minBidIncrement, minDuration, minPrice, operators, tradingFeeBps }: {
        bufferDuration?: number;
        closedDuration?: number;
        collectorAddress?: string;
        maxDuration?: number;
        minBidIncrement?: Uint128;
        minDuration?: number;
        minPrice?: Uint128;
        operators?: string[];
        tradingFeeBps?: number;
    }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
    setAuction: ({ endTime, fundsRecipient, reservePrice, startTime, startingPrice, tokenId }: {
        endTime: Timestamp;
        fundsRecipient?: string;
        reservePrice?: Coin;
        startTime: Timestamp;
        startingPrice: Coin;
        tokenId: string;
    }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
    setAuctionBid: ({ price, tokenId }: {
        price: Coin;
        tokenId: string;
    }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
    closeAuction: ({ acceptHighestBid, tokenId }: {
        acceptHighestBid: boolean;
        tokenId: string;
    }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
    finalizeAuction: ({ tokenId }: {
        tokenId: string;
    }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
    voidAuction: ({ tokenId }: {
        tokenId: string;
    }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
}

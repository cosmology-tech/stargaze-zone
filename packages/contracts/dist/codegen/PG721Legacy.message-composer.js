"use strict";
/**
* This file was automatically generated by @cosmwasm/ts-codegen@1.11.1.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/
Object.defineProperty(exports, "__esModule", { value: true });
exports.PG721LegacyMsgComposer = void 0;
const tx_1 = require("cosmjs-types/cosmwasm/wasm/v1/tx");
const encoding_1 = require("@cosmjs/encoding");
class PG721LegacyMsgComposer {
    sender;
    contractAddress;
    constructor(sender, contractAddress) {
        this.sender = sender;
        this.contractAddress = contractAddress;
        this.transferNft = this.transferNft.bind(this);
        this.sendNft = this.sendNft.bind(this);
        this.approve = this.approve.bind(this);
        this.revoke = this.revoke.bind(this);
        this.approveAll = this.approveAll.bind(this);
        this.revokeAll = this.revokeAll.bind(this);
        this.mint = this.mint.bind(this);
        this.burn = this.burn.bind(this);
    }
    transferNft = ({ recipient, tokenId }, _funds) => {
        return {
            typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
            value: tx_1.MsgExecuteContract.fromPartial({
                sender: this.sender,
                contract: this.contractAddress,
                msg: (0, encoding_1.toUtf8)(JSON.stringify({
                    transfer_nft: {
                        recipient,
                        token_id: tokenId
                    }
                })),
                funds: _funds
            })
        };
    };
    sendNft = ({ contract, msg, tokenId }, _funds) => {
        return {
            typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
            value: tx_1.MsgExecuteContract.fromPartial({
                sender: this.sender,
                contract: this.contractAddress,
                msg: (0, encoding_1.toUtf8)(JSON.stringify({
                    send_nft: {
                        contract,
                        msg,
                        token_id: tokenId
                    }
                })),
                funds: _funds
            })
        };
    };
    approve = ({ expires, spender, tokenId }, _funds) => {
        return {
            typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
            value: tx_1.MsgExecuteContract.fromPartial({
                sender: this.sender,
                contract: this.contractAddress,
                msg: (0, encoding_1.toUtf8)(JSON.stringify({
                    approve: {
                        expires,
                        spender,
                        token_id: tokenId
                    }
                })),
                funds: _funds
            })
        };
    };
    revoke = ({ spender, tokenId }, _funds) => {
        return {
            typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
            value: tx_1.MsgExecuteContract.fromPartial({
                sender: this.sender,
                contract: this.contractAddress,
                msg: (0, encoding_1.toUtf8)(JSON.stringify({
                    revoke: {
                        spender,
                        token_id: tokenId
                    }
                })),
                funds: _funds
            })
        };
    };
    approveAll = ({ expires, operator }, _funds) => {
        return {
            typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
            value: tx_1.MsgExecuteContract.fromPartial({
                sender: this.sender,
                contract: this.contractAddress,
                msg: (0, encoding_1.toUtf8)(JSON.stringify({
                    approve_all: {
                        expires,
                        operator
                    }
                })),
                funds: _funds
            })
        };
    };
    revokeAll = ({ operator }, _funds) => {
        return {
            typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
            value: tx_1.MsgExecuteContract.fromPartial({
                sender: this.sender,
                contract: this.contractAddress,
                msg: (0, encoding_1.toUtf8)(JSON.stringify({
                    revoke_all: {
                        operator
                    }
                })),
                funds: _funds
            })
        };
    };
    mint = ({ extension, owner, tokenId, tokenUri }, _funds) => {
        return {
            typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
            value: tx_1.MsgExecuteContract.fromPartial({
                sender: this.sender,
                contract: this.contractAddress,
                msg: (0, encoding_1.toUtf8)(JSON.stringify({
                    mint: {
                        extension,
                        owner,
                        token_id: tokenId,
                        token_uri: tokenUri
                    }
                })),
                funds: _funds
            })
        };
    };
    burn = ({ tokenId }, _funds) => {
        return {
            typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
            value: tx_1.MsgExecuteContract.fromPartial({
                sender: this.sender,
                contract: this.contractAddress,
                msg: (0, encoding_1.toUtf8)(JSON.stringify({
                    burn: {
                        token_id: tokenId
                    }
                })),
                funds: _funds
            })
        };
    };
}
exports.PG721LegacyMsgComposer = PG721LegacyMsgComposer;
//# sourceMappingURL=PG721Legacy.message-composer.js.map
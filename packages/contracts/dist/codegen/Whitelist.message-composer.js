"use strict";
/**
* This file was automatically generated by @cosmwasm/ts-codegen@1.11.1.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/
Object.defineProperty(exports, "__esModule", { value: true });
exports.WhitelistMsgComposer = void 0;
const tx_1 = require("cosmjs-types/cosmwasm/wasm/v1/tx");
const encoding_1 = require("@cosmjs/encoding");
class WhitelistMsgComposer {
    sender;
    contractAddress;
    constructor(sender, contractAddress) {
        this.sender = sender;
        this.contractAddress = contractAddress;
        this.updateStartTime = this.updateStartTime.bind(this);
        this.updateEndTime = this.updateEndTime.bind(this);
        this.addMembers = this.addMembers.bind(this);
        this.removeMembers = this.removeMembers.bind(this);
        this.updatePerAddressLimit = this.updatePerAddressLimit.bind(this);
        this.increaseMemberLimit = this.increaseMemberLimit.bind(this);
    }
    updateStartTime = (_funds) => {
        return {
            typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
            value: tx_1.MsgExecuteContract.fromPartial({
                sender: this.sender,
                contract: this.contractAddress,
                msg: (0, encoding_1.toUtf8)(JSON.stringify({
                    update_start_time: {}
                })),
                funds: _funds
            })
        };
    };
    updateEndTime = (_funds) => {
        return {
            typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
            value: tx_1.MsgExecuteContract.fromPartial({
                sender: this.sender,
                contract: this.contractAddress,
                msg: (0, encoding_1.toUtf8)(JSON.stringify({
                    update_end_time: {}
                })),
                funds: _funds
            })
        };
    };
    addMembers = ({ toAdd }, _funds) => {
        return {
            typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
            value: tx_1.MsgExecuteContract.fromPartial({
                sender: this.sender,
                contract: this.contractAddress,
                msg: (0, encoding_1.toUtf8)(JSON.stringify({
                    add_members: {
                        to_add: toAdd
                    }
                })),
                funds: _funds
            })
        };
    };
    removeMembers = ({ toRemove }, _funds) => {
        return {
            typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
            value: tx_1.MsgExecuteContract.fromPartial({
                sender: this.sender,
                contract: this.contractAddress,
                msg: (0, encoding_1.toUtf8)(JSON.stringify({
                    remove_members: {
                        to_remove: toRemove
                    }
                })),
                funds: _funds
            })
        };
    };
    updatePerAddressLimit = (_funds) => {
        return {
            typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
            value: tx_1.MsgExecuteContract.fromPartial({
                sender: this.sender,
                contract: this.contractAddress,
                msg: (0, encoding_1.toUtf8)(JSON.stringify({
                    update_per_address_limit: {}
                })),
                funds: _funds
            })
        };
    };
    increaseMemberLimit = (_funds) => {
        return {
            typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
            value: tx_1.MsgExecuteContract.fromPartial({
                sender: this.sender,
                contract: this.contractAddress,
                msg: (0, encoding_1.toUtf8)(JSON.stringify({
                    increase_member_limit: {}
                })),
                funds: _funds
            })
        };
    };
}
exports.WhitelistMsgComposer = WhitelistMsgComposer;
//# sourceMappingURL=Whitelist.message-composer.js.map
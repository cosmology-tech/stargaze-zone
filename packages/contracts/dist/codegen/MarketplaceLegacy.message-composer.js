"use strict";
/**
* This file was automatically generated by @cosmwasm/ts-codegen@1.11.1.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/
Object.defineProperty(exports, "__esModule", { value: true });
exports.MarketplaceLegacyMsgComposer = void 0;
const tx_1 = require("cosmjs-types/cosmwasm/wasm/v1/tx");
const encoding_1 = require("@cosmjs/encoding");
class MarketplaceLegacyMsgComposer {
    sender;
    contractAddress;
    constructor(sender, contractAddress) {
        this.sender = sender;
        this.contractAddress = contractAddress;
        this.buy = this.buy.bind(this);
        this.listTokens = this.listTokens.bind(this);
        this.delistTokens = this.delistTokens.bind(this);
        this.updatePrice = this.updatePrice.bind(this);
        this.updateConfig = this.updateConfig.bind(this);
    }
    buy = ({ recipient, tokenId }, _funds) => {
        return {
            typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
            value: tx_1.MsgExecuteContract.fromPartial({
                sender: this.sender,
                contract: this.contractAddress,
                msg: (0, encoding_1.toUtf8)(JSON.stringify({
                    buy: {
                        recipient,
                        token_id: tokenId
                    }
                })),
                funds: _funds
            })
        };
    };
    listTokens = ({ tokens }, _funds) => {
        return {
            typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
            value: tx_1.MsgExecuteContract.fromPartial({
                sender: this.sender,
                contract: this.contractAddress,
                msg: (0, encoding_1.toUtf8)(JSON.stringify({
                    list_tokens: {
                        tokens
                    }
                })),
                funds: _funds
            })
        };
    };
    delistTokens = ({ tokens }, _funds) => {
        return {
            typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
            value: tx_1.MsgExecuteContract.fromPartial({
                sender: this.sender,
                contract: this.contractAddress,
                msg: (0, encoding_1.toUtf8)(JSON.stringify({
                    delist_tokens: {
                        tokens
                    }
                })),
                funds: _funds
            })
        };
    };
    updatePrice = ({ price, token }, _funds) => {
        return {
            typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
            value: tx_1.MsgExecuteContract.fromPartial({
                sender: this.sender,
                contract: this.contractAddress,
                msg: (0, encoding_1.toUtf8)(JSON.stringify({
                    update_price: {
                        price,
                        token
                    }
                })),
                funds: _funds
            })
        };
    };
    updateConfig = ({ admin, allowedNative, collectorAddr, feePercentage, nftAddr }, _funds) => {
        return {
            typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
            value: tx_1.MsgExecuteContract.fromPartial({
                sender: this.sender,
                contract: this.contractAddress,
                msg: (0, encoding_1.toUtf8)(JSON.stringify({
                    update_config: {
                        admin,
                        allowed_native: allowedNative,
                        collector_addr: collectorAddr,
                        fee_percentage: feePercentage,
                        nft_addr: nftAddr
                    }
                })),
                funds: _funds
            })
        };
    };
}
exports.MarketplaceLegacyMsgComposer = MarketplaceLegacyMsgComposer;
//# sourceMappingURL=MarketplaceLegacy.message-composer.js.map
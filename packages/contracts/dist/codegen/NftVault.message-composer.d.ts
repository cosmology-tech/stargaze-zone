/**
* This file was automatically generated by @cosmwasm/ts-codegen@1.11.1.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/
import { Coin } from "@cosmjs/amino";
import { MsgExecuteContractEncodeObject } from "@cosmjs/cosmwasm-stargate";
export interface NftVaultMsg {
    contractAddress: string;
    sender: string;
    updateConfig: ({ label, operators, unstakePeriod }: {
        label?: string;
        operators?: string[];
        unstakePeriod?: number;
    }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
    addStakeHook: ({ hook }: {
        hook: string;
    }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
    removeStakeHook: ({ hook }: {
        hook: string;
    }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
    addUnstakeHook: ({ hook }: {
        hook: string;
    }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
    removeUnstakeHook: ({ hook }: {
        hook: string;
    }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
    addWithdrawHook: ({ hook }: {
        hook: string;
    }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
    removeWithdrawHook: ({ hook }: {
        hook: string;
    }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
    stake: ({ tokenId }: {
        tokenId: string;
    }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
    unstake: ({ tokenId }: {
        tokenId: string;
    }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
    withdraw: ({ tokenId }: {
        tokenId: string;
    }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
}
export declare class NftVaultMsgComposer implements NftVaultMsg {
    sender: string;
    contractAddress: string;
    constructor(sender: string, contractAddress: string);
    updateConfig: ({ label, operators, unstakePeriod }: {
        label?: string;
        operators?: string[];
        unstakePeriod?: number;
    }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
    addStakeHook: ({ hook }: {
        hook: string;
    }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
    removeStakeHook: ({ hook }: {
        hook: string;
    }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
    addUnstakeHook: ({ hook }: {
        hook: string;
    }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
    removeUnstakeHook: ({ hook }: {
        hook: string;
    }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
    addWithdrawHook: ({ hook }: {
        hook: string;
    }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
    removeWithdrawHook: ({ hook }: {
        hook: string;
    }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
    stake: ({ tokenId }: {
        tokenId: string;
    }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
    unstake: ({ tokenId }: {
        tokenId: string;
    }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
    withdraw: ({ tokenId }: {
        tokenId: string;
    }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
}

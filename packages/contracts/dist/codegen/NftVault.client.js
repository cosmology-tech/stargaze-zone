"use strict";
/**
* This file was automatically generated by @cosmwasm/ts-codegen@1.11.1.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/
Object.defineProperty(exports, "__esModule", { value: true });
exports.NftVaultClient = exports.NftVaultQueryClient = void 0;
class NftVaultQueryClient {
    client;
    contractAddress;
    constructor(client, contractAddress) {
        this.client = client;
        this.contractAddress = contractAddress;
        this.config = this.config.bind(this);
        this.stakeHooks = this.stakeHooks.bind(this);
        this.unstakeHooks = this.unstakeHooks.bind(this);
        this.withdrawHooks = this.withdrawHooks.bind(this);
        this.vaultToken = this.vaultToken.bind(this);
        this.vaultTokensByOwner = this.vaultTokensByOwner.bind(this);
        this.vaultTokensByStakeTimestamp = this.vaultTokensByStakeTimestamp.bind(this);
        this.vaultTokensByUnstakeTimestamp = this.vaultTokensByUnstakeTimestamp.bind(this);
    }
    config = async () => {
        return this.client.queryContractSmart(this.contractAddress, {
            config: {}
        });
    };
    stakeHooks = async () => {
        return this.client.queryContractSmart(this.contractAddress, {
            stake_hooks: {}
        });
    };
    unstakeHooks = async () => {
        return this.client.queryContractSmart(this.contractAddress, {
            unstake_hooks: {}
        });
    };
    withdrawHooks = async () => {
        return this.client.queryContractSmart(this.contractAddress, {
            withdraw_hooks: {}
        });
    };
    vaultToken = async ({ tokenId }) => {
        return this.client.queryContractSmart(this.contractAddress, {
            vault_token: {
                token_id: tokenId
            }
        });
    };
    vaultTokensByOwner = async ({ owner, queryOptions }) => {
        return this.client.queryContractSmart(this.contractAddress, {
            vault_tokens_by_owner: {
                owner,
                query_options: queryOptions
            }
        });
    };
    vaultTokensByStakeTimestamp = async ({ queryOptions }) => {
        return this.client.queryContractSmart(this.contractAddress, {
            vault_tokens_by_stake_timestamp: {
                query_options: queryOptions
            }
        });
    };
    vaultTokensByUnstakeTimestamp = async ({ queryOptions }) => {
        return this.client.queryContractSmart(this.contractAddress, {
            vault_tokens_by_unstake_timestamp: {
                query_options: queryOptions
            }
        });
    };
}
exports.NftVaultQueryClient = NftVaultQueryClient;
class NftVaultClient extends NftVaultQueryClient {
    client;
    sender;
    contractAddress;
    constructor(client, sender, contractAddress) {
        super(client, contractAddress);
        this.client = client;
        this.sender = sender;
        this.contractAddress = contractAddress;
        this.updateConfig = this.updateConfig.bind(this);
        this.addStakeHook = this.addStakeHook.bind(this);
        this.removeStakeHook = this.removeStakeHook.bind(this);
        this.addUnstakeHook = this.addUnstakeHook.bind(this);
        this.removeUnstakeHook = this.removeUnstakeHook.bind(this);
        this.addWithdrawHook = this.addWithdrawHook.bind(this);
        this.removeWithdrawHook = this.removeWithdrawHook.bind(this);
        this.stake = this.stake.bind(this);
        this.unstake = this.unstake.bind(this);
        this.withdraw = this.withdraw.bind(this);
    }
    updateConfig = async ({ label, operators, unstakePeriod }, fee = "auto", memo, _funds) => {
        return await this.client.execute(this.sender, this.contractAddress, {
            update_config: {
                label,
                operators,
                unstake_period: unstakePeriod
            }
        }, fee, memo, _funds);
    };
    addStakeHook = async ({ hook }, fee = "auto", memo, _funds) => {
        return await this.client.execute(this.sender, this.contractAddress, {
            add_stake_hook: {
                hook
            }
        }, fee, memo, _funds);
    };
    removeStakeHook = async ({ hook }, fee = "auto", memo, _funds) => {
        return await this.client.execute(this.sender, this.contractAddress, {
            remove_stake_hook: {
                hook
            }
        }, fee, memo, _funds);
    };
    addUnstakeHook = async ({ hook }, fee = "auto", memo, _funds) => {
        return await this.client.execute(this.sender, this.contractAddress, {
            add_unstake_hook: {
                hook
            }
        }, fee, memo, _funds);
    };
    removeUnstakeHook = async ({ hook }, fee = "auto", memo, _funds) => {
        return await this.client.execute(this.sender, this.contractAddress, {
            remove_unstake_hook: {
                hook
            }
        }, fee, memo, _funds);
    };
    addWithdrawHook = async ({ hook }, fee = "auto", memo, _funds) => {
        return await this.client.execute(this.sender, this.contractAddress, {
            add_withdraw_hook: {
                hook
            }
        }, fee, memo, _funds);
    };
    removeWithdrawHook = async ({ hook }, fee = "auto", memo, _funds) => {
        return await this.client.execute(this.sender, this.contractAddress, {
            remove_withdraw_hook: {
                hook
            }
        }, fee, memo, _funds);
    };
    stake = async ({ tokenId }, fee = "auto", memo, _funds) => {
        return await this.client.execute(this.sender, this.contractAddress, {
            stake: {
                token_id: tokenId
            }
        }, fee, memo, _funds);
    };
    unstake = async ({ tokenId }, fee = "auto", memo, _funds) => {
        return await this.client.execute(this.sender, this.contractAddress, {
            unstake: {
                token_id: tokenId
            }
        }, fee, memo, _funds);
    };
    withdraw = async ({ tokenId }, fee = "auto", memo, _funds) => {
        return await this.client.execute(this.sender, this.contractAddress, {
            withdraw: {
                token_id: tokenId
            }
        }, fee, memo, _funds);
    };
}
exports.NftVaultClient = NftVaultClient;
//# sourceMappingURL=NftVault.client.js.map
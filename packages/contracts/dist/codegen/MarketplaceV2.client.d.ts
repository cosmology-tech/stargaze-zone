/**
* This file was automatically generated by @cosmwasm/ts-codegen@1.11.1.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/
import { CosmWasmClient, SigningCosmWasmClient, ExecuteResult } from "@cosmjs/cosmwasm-stargate";
import { StdFee } from "@cosmjs/amino";
import { AskCountResponse, Timestamp, Uint128, AskResponse, Coin, BidResponse, CollectionBidResponse, ConfigResponse, ExpiryRange, QueryOptionsForTokenTimestampOffset, QueryOptionsForTokenPriceOffset, QueryOptionsForBidExpiryOffset, QueryOptionsForBidTokenPriceOffset, QueryOptionsForCollectionBidPriceOffset, QueryOptionsForCollectionBidExpiryOffset } from "./MarketplaceV2.types";
export interface MarketplaceV2ReadOnlyInterface {
    contractAddress: string;
    config: () => Promise<ConfigResponse>;
    ask: ({ tokenId }: {
        tokenId: string;
    }) => Promise<AskResponse>;
    asksSortedByExpiry: ({ queryOptions }: {
        queryOptions: QueryOptionsForTokenTimestampOffset;
    }) => Promise<AsksSortedByExpiryResponse>;
    asksSortedByPrice: ({ queryOptions }: {
        queryOptions: QueryOptionsForTokenPriceOffset;
    }) => Promise<AsksSortedByPriceResponse>;
    asksBySellerExpiry: ({ queryOptions, seller }: {
        queryOptions: QueryOptionsForTokenTimestampOffset;
        seller: string;
    }) => Promise<AsksBySellerExpiryResponse>;
    askCount: () => Promise<AskCountResponse>;
    bid: ({ bidder, tokenId }: {
        bidder: string;
        tokenId: string;
    }) => Promise<BidResponse>;
    bidsSortedByExpiry: ({ queryOptions }: {
        queryOptions: QueryOptionsForBidExpiryOffset;
    }) => Promise<BidsSortedByExpiryResponse>;
    bidsByTokenPrice: ({ queryOptions, tokenId }: {
        queryOptions: QueryOptionsForBidTokenPriceOffset;
        tokenId: string;
    }) => Promise<BidsByTokenPriceResponse>;
    bidsByBidderExpiry: ({ bidder, queryOptions }: {
        bidder: string;
        queryOptions: QueryOptionsForBidExpiryOffset;
    }) => Promise<BidsByBidderExpiryResponse>;
    collectionBid: ({ bidder }: {
        bidder: string;
    }) => Promise<CollectionBidResponse>;
    collectionBidsByPrice: ({ queryOptions }: {
        queryOptions: QueryOptionsForCollectionBidPriceOffset;
    }) => Promise<CollectionBidsByPriceResponse>;
    collectionBidsByExpiry: ({ queryOptions }: {
        queryOptions: QueryOptionsForCollectionBidExpiryOffset;
    }) => Promise<CollectionBidsByExpiryResponse>;
}
export declare class MarketplaceV2QueryClient implements MarketplaceV2ReadOnlyInterface {
    client: CosmWasmClient;
    contractAddress: string;
    constructor(client: CosmWasmClient, contractAddress: string);
    config: () => Promise<ConfigResponse>;
    ask: ({ tokenId }: {
        tokenId: string;
    }) => Promise<AskResponse>;
    asksSortedByExpiry: ({ queryOptions }: {
        queryOptions: QueryOptionsForTokenTimestampOffset;
    }) => Promise<AsksSortedByExpiryResponse>;
    asksSortedByPrice: ({ queryOptions }: {
        queryOptions: QueryOptionsForTokenPriceOffset;
    }) => Promise<AsksSortedByPriceResponse>;
    asksBySellerExpiry: ({ queryOptions, seller }: {
        queryOptions: QueryOptionsForTokenTimestampOffset;
        seller: string;
    }) => Promise<AsksBySellerExpiryResponse>;
    askCount: () => Promise<AskCountResponse>;
    bid: ({ bidder, tokenId }: {
        bidder: string;
        tokenId: string;
    }) => Promise<BidResponse>;
    bidsSortedByExpiry: ({ queryOptions }: {
        queryOptions: QueryOptionsForBidExpiryOffset;
    }) => Promise<BidsSortedByExpiryResponse>;
    bidsByTokenPrice: ({ queryOptions, tokenId }: {
        queryOptions: QueryOptionsForBidTokenPriceOffset;
        tokenId: string;
    }) => Promise<BidsByTokenPriceResponse>;
    bidsByBidderExpiry: ({ bidder, queryOptions }: {
        bidder: string;
        queryOptions: QueryOptionsForBidExpiryOffset;
    }) => Promise<BidsByBidderExpiryResponse>;
    collectionBid: ({ bidder }: {
        bidder: string;
    }) => Promise<CollectionBidResponse>;
    collectionBidsByPrice: ({ queryOptions }: {
        queryOptions: QueryOptionsForCollectionBidPriceOffset;
    }) => Promise<CollectionBidsByPriceResponse>;
    collectionBidsByExpiry: ({ queryOptions }: {
        queryOptions: QueryOptionsForCollectionBidExpiryOffset;
    }) => Promise<CollectionBidsByExpiryResponse>;
}
export interface MarketplaceV2Interface extends MarketplaceV2ReadOnlyInterface {
    contractAddress: string;
    sender: string;
    updateConfig: ({ askExpiry, bidExpiry, minPrice, operators, tradingFeeBps }: {
        askExpiry?: ExpiryRange;
        bidExpiry?: ExpiryRange;
        minPrice?: Uint128;
        operators?: string[];
        tradingFeeBps?: number;
    }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
    setAsk: ({ expiresAt, fundsRecipient, price, reserveFor, tokenId }: {
        expiresAt: Timestamp;
        fundsRecipient?: string;
        price: Coin;
        reserveFor?: string;
        tokenId: string;
    }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
    removeAsk: ({ tokenId }: {
        tokenId: string;
    }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
    setBid: ({ expiresAt, price, tokenId }: {
        expiresAt: Timestamp;
        price: Coin;
        tokenId: string;
    }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
    removeBid: ({ tokenId }: {
        tokenId: string;
    }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
    acceptBid: ({ bidder, tokenId }: {
        bidder: string;
        tokenId: string;
    }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
    setCollectionBid: ({ expiresAt, price, units }: {
        expiresAt: Timestamp;
        price: Coin;
        units: number;
    }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
    removeCollectionBid: (fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
    acceptCollectionBid: ({ bidder, tokenId }: {
        bidder: string;
        tokenId: string;
    }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
}
export declare class MarketplaceV2Client extends MarketplaceV2QueryClient implements MarketplaceV2Interface {
    client: SigningCosmWasmClient;
    sender: string;
    contractAddress: string;
    constructor(client: SigningCosmWasmClient, sender: string, contractAddress: string);
    updateConfig: ({ askExpiry, bidExpiry, minPrice, operators, tradingFeeBps }: {
        askExpiry?: ExpiryRange;
        bidExpiry?: ExpiryRange;
        minPrice?: Uint128;
        operators?: string[];
        tradingFeeBps?: number;
    }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
    setAsk: ({ expiresAt, fundsRecipient, price, reserveFor, tokenId }: {
        expiresAt: Timestamp;
        fundsRecipient?: string;
        price: Coin;
        reserveFor?: string;
        tokenId: string;
    }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
    removeAsk: ({ tokenId }: {
        tokenId: string;
    }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
    setBid: ({ expiresAt, price, tokenId }: {
        expiresAt: Timestamp;
        price: Coin;
        tokenId: string;
    }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
    removeBid: ({ tokenId }: {
        tokenId: string;
    }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
    acceptBid: ({ bidder, tokenId }: {
        bidder: string;
        tokenId: string;
    }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
    setCollectionBid: ({ expiresAt, price, units }: {
        expiresAt: Timestamp;
        price: Coin;
        units: number;
    }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
    removeCollectionBid: (fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
    acceptCollectionBid: ({ bidder, tokenId }: {
        bidder: string;
        tokenId: string;
    }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
}

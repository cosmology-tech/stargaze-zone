"use strict";
/**
* This file was automatically generated by @cosmwasm/ts-codegen@1.11.1.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/
Object.defineProperty(exports, "__esModule", { value: true });
exports.RoyaltyGroupMsgComposer = void 0;
const tx_1 = require("cosmjs-types/cosmwasm/wasm/v1/tx");
const encoding_1 = require("@cosmjs/encoding");
class RoyaltyGroupMsgComposer {
    sender;
    contractAddress;
    constructor(sender, contractAddress) {
        this.sender = sender;
        this.contractAddress = contractAddress;
        this.updateAdmin = this.updateAdmin.bind(this);
        this.updateMembers = this.updateMembers.bind(this);
        this.addHook = this.addHook.bind(this);
        this.removeHook = this.removeHook.bind(this);
        this.distribute = this.distribute.bind(this);
    }
    updateAdmin = ({ admin }, _funds) => {
        return {
            typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
            value: tx_1.MsgExecuteContract.fromPartial({
                sender: this.sender,
                contract: this.contractAddress,
                msg: (0, encoding_1.toUtf8)(JSON.stringify({
                    update_admin: {
                        admin
                    }
                })),
                funds: _funds
            })
        };
    };
    updateMembers = ({ add, remove }, _funds) => {
        return {
            typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
            value: tx_1.MsgExecuteContract.fromPartial({
                sender: this.sender,
                contract: this.contractAddress,
                msg: (0, encoding_1.toUtf8)(JSON.stringify({
                    update_members: {
                        add,
                        remove
                    }
                })),
                funds: _funds
            })
        };
    };
    addHook = ({ addr }, _funds) => {
        return {
            typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
            value: tx_1.MsgExecuteContract.fromPartial({
                sender: this.sender,
                contract: this.contractAddress,
                msg: (0, encoding_1.toUtf8)(JSON.stringify({
                    add_hook: {
                        addr
                    }
                })),
                funds: _funds
            })
        };
    };
    removeHook = ({ addr }, _funds) => {
        return {
            typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
            value: tx_1.MsgExecuteContract.fromPartial({
                sender: this.sender,
                contract: this.contractAddress,
                msg: (0, encoding_1.toUtf8)(JSON.stringify({
                    remove_hook: {
                        addr
                    }
                })),
                funds: _funds
            })
        };
    };
    distribute = ({ funds }, _funds) => {
        return {
            typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
            value: tx_1.MsgExecuteContract.fromPartial({
                sender: this.sender,
                contract: this.contractAddress,
                msg: (0, encoding_1.toUtf8)(JSON.stringify({
                    distribute: {
                        funds
                    }
                })),
                funds: _funds
            })
        };
    };
}
exports.RoyaltyGroupMsgComposer = RoyaltyGroupMsgComposer;
//# sourceMappingURL=RoyaltyGroup.message-composer.js.map
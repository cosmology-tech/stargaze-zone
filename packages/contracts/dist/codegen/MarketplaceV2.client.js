"use strict";
/**
* This file was automatically generated by @cosmwasm/ts-codegen@1.11.1.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/
Object.defineProperty(exports, "__esModule", { value: true });
exports.MarketplaceV2Client = exports.MarketplaceV2QueryClient = void 0;
class MarketplaceV2QueryClient {
    client;
    contractAddress;
    constructor(client, contractAddress) {
        this.client = client;
        this.contractAddress = contractAddress;
        this.config = this.config.bind(this);
        this.ask = this.ask.bind(this);
        this.asksSortedByExpiry = this.asksSortedByExpiry.bind(this);
        this.asksSortedByPrice = this.asksSortedByPrice.bind(this);
        this.asksBySellerExpiry = this.asksBySellerExpiry.bind(this);
        this.askCount = this.askCount.bind(this);
        this.bid = this.bid.bind(this);
        this.bidsSortedByExpiry = this.bidsSortedByExpiry.bind(this);
        this.bidsByTokenPrice = this.bidsByTokenPrice.bind(this);
        this.bidsByBidderExpiry = this.bidsByBidderExpiry.bind(this);
        this.collectionBid = this.collectionBid.bind(this);
        this.collectionBidsByPrice = this.collectionBidsByPrice.bind(this);
        this.collectionBidsByExpiry = this.collectionBidsByExpiry.bind(this);
    }
    config = async () => {
        return this.client.queryContractSmart(this.contractAddress, {
            config: {}
        });
    };
    ask = async ({ tokenId }) => {
        return this.client.queryContractSmart(this.contractAddress, {
            ask: {
                token_id: tokenId
            }
        });
    };
    asksSortedByExpiry = async ({ queryOptions }) => {
        return this.client.queryContractSmart(this.contractAddress, {
            asks_sorted_by_expiry: {
                query_options: queryOptions
            }
        });
    };
    asksSortedByPrice = async ({ queryOptions }) => {
        return this.client.queryContractSmart(this.contractAddress, {
            asks_sorted_by_price: {
                query_options: queryOptions
            }
        });
    };
    asksBySellerExpiry = async ({ queryOptions, seller }) => {
        return this.client.queryContractSmart(this.contractAddress, {
            asks_by_seller_expiry: {
                query_options: queryOptions,
                seller
            }
        });
    };
    askCount = async () => {
        return this.client.queryContractSmart(this.contractAddress, {
            ask_count: {}
        });
    };
    bid = async ({ bidder, tokenId }) => {
        return this.client.queryContractSmart(this.contractAddress, {
            bid: {
                bidder,
                token_id: tokenId
            }
        });
    };
    bidsSortedByExpiry = async ({ queryOptions }) => {
        return this.client.queryContractSmart(this.contractAddress, {
            bids_sorted_by_expiry: {
                query_options: queryOptions
            }
        });
    };
    bidsByTokenPrice = async ({ queryOptions, tokenId }) => {
        return this.client.queryContractSmart(this.contractAddress, {
            bids_by_token_price: {
                query_options: queryOptions,
                token_id: tokenId
            }
        });
    };
    bidsByBidderExpiry = async ({ bidder, queryOptions }) => {
        return this.client.queryContractSmart(this.contractAddress, {
            bids_by_bidder_expiry: {
                bidder,
                query_options: queryOptions
            }
        });
    };
    collectionBid = async ({ bidder }) => {
        return this.client.queryContractSmart(this.contractAddress, {
            collection_bid: {
                bidder
            }
        });
    };
    collectionBidsByPrice = async ({ queryOptions }) => {
        return this.client.queryContractSmart(this.contractAddress, {
            collection_bids_by_price: {
                query_options: queryOptions
            }
        });
    };
    collectionBidsByExpiry = async ({ queryOptions }) => {
        return this.client.queryContractSmart(this.contractAddress, {
            collection_bids_by_expiry: {
                query_options: queryOptions
            }
        });
    };
}
exports.MarketplaceV2QueryClient = MarketplaceV2QueryClient;
class MarketplaceV2Client extends MarketplaceV2QueryClient {
    client;
    sender;
    contractAddress;
    constructor(client, sender, contractAddress) {
        super(client, contractAddress);
        this.client = client;
        this.sender = sender;
        this.contractAddress = contractAddress;
        this.updateConfig = this.updateConfig.bind(this);
        this.setAsk = this.setAsk.bind(this);
        this.removeAsk = this.removeAsk.bind(this);
        this.setBid = this.setBid.bind(this);
        this.removeBid = this.removeBid.bind(this);
        this.acceptBid = this.acceptBid.bind(this);
        this.setCollectionBid = this.setCollectionBid.bind(this);
        this.removeCollectionBid = this.removeCollectionBid.bind(this);
        this.acceptCollectionBid = this.acceptCollectionBid.bind(this);
    }
    updateConfig = async ({ askExpiry, bidExpiry, minPrice, operators, tradingFeeBps }, fee = "auto", memo, _funds) => {
        return await this.client.execute(this.sender, this.contractAddress, {
            update_config: {
                ask_expiry: askExpiry,
                bid_expiry: bidExpiry,
                min_price: minPrice,
                operators,
                trading_fee_bps: tradingFeeBps
            }
        }, fee, memo, _funds);
    };
    setAsk = async ({ expiresAt, fundsRecipient, price, reserveFor, tokenId }, fee = "auto", memo, _funds) => {
        return await this.client.execute(this.sender, this.contractAddress, {
            set_ask: {
                expires_at: expiresAt,
                funds_recipient: fundsRecipient,
                price,
                reserve_for: reserveFor,
                token_id: tokenId
            }
        }, fee, memo, _funds);
    };
    removeAsk = async ({ tokenId }, fee = "auto", memo, _funds) => {
        return await this.client.execute(this.sender, this.contractAddress, {
            remove_ask: {
                token_id: tokenId
            }
        }, fee, memo, _funds);
    };
    setBid = async ({ expiresAt, price, tokenId }, fee = "auto", memo, _funds) => {
        return await this.client.execute(this.sender, this.contractAddress, {
            set_bid: {
                expires_at: expiresAt,
                price,
                token_id: tokenId
            }
        }, fee, memo, _funds);
    };
    removeBid = async ({ tokenId }, fee = "auto", memo, _funds) => {
        return await this.client.execute(this.sender, this.contractAddress, {
            remove_bid: {
                token_id: tokenId
            }
        }, fee, memo, _funds);
    };
    acceptBid = async ({ bidder, tokenId }, fee = "auto", memo, _funds) => {
        return await this.client.execute(this.sender, this.contractAddress, {
            accept_bid: {
                bidder,
                token_id: tokenId
            }
        }, fee, memo, _funds);
    };
    setCollectionBid = async ({ expiresAt, price, units }, fee = "auto", memo, _funds) => {
        return await this.client.execute(this.sender, this.contractAddress, {
            set_collection_bid: {
                expires_at: expiresAt,
                price,
                units
            }
        }, fee, memo, _funds);
    };
    removeCollectionBid = async (fee = "auto", memo, _funds) => {
        return await this.client.execute(this.sender, this.contractAddress, {
            remove_collection_bid: {}
        }, fee, memo, _funds);
    };
    acceptCollectionBid = async ({ bidder, tokenId }, fee = "auto", memo, _funds) => {
        return await this.client.execute(this.sender, this.contractAddress, {
            accept_collection_bid: {
                bidder,
                token_id: tokenId
            }
        }, fee, memo, _funds);
    };
}
exports.MarketplaceV2Client = MarketplaceV2Client;
//# sourceMappingURL=MarketplaceV2.client.js.map
"use strict";
/**
* This file was automatically generated by @cosmwasm/ts-codegen@1.11.1.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/
Object.defineProperty(exports, "__esModule", { value: true });
exports.WhitelistClient = exports.WhitelistQueryClient = void 0;
class WhitelistQueryClient {
    client;
    contractAddress;
    constructor(client, contractAddress) {
        this.client = client;
        this.contractAddress = contractAddress;
        this.hasStarted = this.hasStarted.bind(this);
        this.hasEnded = this.hasEnded.bind(this);
        this.isActive = this.isActive.bind(this);
        this.members = this.members.bind(this);
        this.hasMember = this.hasMember.bind(this);
        this.config = this.config.bind(this);
    }
    hasStarted = async () => {
        return this.client.queryContractSmart(this.contractAddress, {
            has_started: {}
        });
    };
    hasEnded = async () => {
        return this.client.queryContractSmart(this.contractAddress, {
            has_ended: {}
        });
    };
    isActive = async () => {
        return this.client.queryContractSmart(this.contractAddress, {
            is_active: {}
        });
    };
    members = async ({ limit, startAfter }) => {
        return this.client.queryContractSmart(this.contractAddress, {
            members: {
                limit,
                start_after: startAfter
            }
        });
    };
    hasMember = async ({ member }) => {
        return this.client.queryContractSmart(this.contractAddress, {
            has_member: {
                member
            }
        });
    };
    config = async () => {
        return this.client.queryContractSmart(this.contractAddress, {
            config: {}
        });
    };
}
exports.WhitelistQueryClient = WhitelistQueryClient;
class WhitelistClient extends WhitelistQueryClient {
    client;
    sender;
    contractAddress;
    constructor(client, sender, contractAddress) {
        super(client, contractAddress);
        this.client = client;
        this.sender = sender;
        this.contractAddress = contractAddress;
        this.updateStartTime = this.updateStartTime.bind(this);
        this.updateEndTime = this.updateEndTime.bind(this);
        this.addMembers = this.addMembers.bind(this);
        this.removeMembers = this.removeMembers.bind(this);
        this.updatePerAddressLimit = this.updatePerAddressLimit.bind(this);
        this.increaseMemberLimit = this.increaseMemberLimit.bind(this);
    }
    updateStartTime = async (fee = "auto", memo, _funds) => {
        return await this.client.execute(this.sender, this.contractAddress, {
            update_start_time: {}
        }, fee, memo, _funds);
    };
    updateEndTime = async (fee = "auto", memo, _funds) => {
        return await this.client.execute(this.sender, this.contractAddress, {
            update_end_time: {}
        }, fee, memo, _funds);
    };
    addMembers = async ({ toAdd }, fee = "auto", memo, _funds) => {
        return await this.client.execute(this.sender, this.contractAddress, {
            add_members: {
                to_add: toAdd
            }
        }, fee, memo, _funds);
    };
    removeMembers = async ({ toRemove }, fee = "auto", memo, _funds) => {
        return await this.client.execute(this.sender, this.contractAddress, {
            remove_members: {
                to_remove: toRemove
            }
        }, fee, memo, _funds);
    };
    updatePerAddressLimit = async (fee = "auto", memo, _funds) => {
        return await this.client.execute(this.sender, this.contractAddress, {
            update_per_address_limit: {}
        }, fee, memo, _funds);
    };
    increaseMemberLimit = async (fee = "auto", memo, _funds) => {
        return await this.client.execute(this.sender, this.contractAddress, {
            increase_member_limit: {}
        }, fee, memo, _funds);
    };
}
exports.WhitelistClient = WhitelistClient;
//# sourceMappingURL=Whitelist.client.js.map
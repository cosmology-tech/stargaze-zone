/**
* This file was automatically generated by @cosmwasm/ts-codegen@1.11.1.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/
import { CosmWasmClient, SigningCosmWasmClient, ExecuteResult } from "@cosmjs/cosmwasm-stargate";
import { StdFee } from "@cosmjs/amino";
import { Timestamp, Uint128, AuctionResponse, Coin, ConfigResponse, QueryOptionsForTokenTimestampOffset, QueryOptionsForTokenPriceOffset } from "./AuctionEnglish.types";
export interface AuctionEnglishReadOnlyInterface {
    contractAddress: string;
    config: () => Promise<ConfigResponse>;
    auction: ({ tokenId }: {
        tokenId: string;
    }) => Promise<AuctionResponse>;
    auctionsByStartTime: ({ queryOptions }: {
        queryOptions: QueryOptionsForTokenTimestampOffset;
    }) => Promise<AuctionsByStartTimeResponse>;
    auctionsByEndTime: ({ queryOptions }: {
        queryOptions: QueryOptionsForTokenTimestampOffset;
    }) => Promise<AuctionsByEndTimeResponse>;
    auctionsByHighestBidPrice: ({ queryOptions }: {
        queryOptions: QueryOptionsForTokenPriceOffset;
    }) => Promise<AuctionsByHighestBidPriceResponse>;
    auctionsBySellerEndTime: ({ queryOptions, seller }: {
        queryOptions: QueryOptionsForTokenTimestampOffset;
        seller: string;
    }) => Promise<AuctionsBySellerEndTimeResponse>;
    auctionsByBidderEndTime: ({ bidder, queryOptions }: {
        bidder: string;
        queryOptions: QueryOptionsForTokenTimestampOffset;
    }) => Promise<AuctionsByBidderEndTimeResponse>;
}
export declare class AuctionEnglishQueryClient implements AuctionEnglishReadOnlyInterface {
    client: CosmWasmClient;
    contractAddress: string;
    constructor(client: CosmWasmClient, contractAddress: string);
    config: () => Promise<ConfigResponse>;
    auction: ({ tokenId }: {
        tokenId: string;
    }) => Promise<AuctionResponse>;
    auctionsByStartTime: ({ queryOptions }: {
        queryOptions: QueryOptionsForTokenTimestampOffset;
    }) => Promise<AuctionsByStartTimeResponse>;
    auctionsByEndTime: ({ queryOptions }: {
        queryOptions: QueryOptionsForTokenTimestampOffset;
    }) => Promise<AuctionsByEndTimeResponse>;
    auctionsByHighestBidPrice: ({ queryOptions }: {
        queryOptions: QueryOptionsForTokenPriceOffset;
    }) => Promise<AuctionsByHighestBidPriceResponse>;
    auctionsBySellerEndTime: ({ queryOptions, seller }: {
        queryOptions: QueryOptionsForTokenTimestampOffset;
        seller: string;
    }) => Promise<AuctionsBySellerEndTimeResponse>;
    auctionsByBidderEndTime: ({ bidder, queryOptions }: {
        bidder: string;
        queryOptions: QueryOptionsForTokenTimestampOffset;
    }) => Promise<AuctionsByBidderEndTimeResponse>;
}
export interface AuctionEnglishInterface extends AuctionEnglishReadOnlyInterface {
    contractAddress: string;
    sender: string;
    updateConfig: ({ bufferDuration, closedDuration, collectorAddress, maxDuration, minBidIncrement, minDuration, minPrice, operators, tradingFeeBps }: {
        bufferDuration?: number;
        closedDuration?: number;
        collectorAddress?: string;
        maxDuration?: number;
        minBidIncrement?: Uint128;
        minDuration?: number;
        minPrice?: Uint128;
        operators?: string[];
        tradingFeeBps?: number;
    }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
    setAuction: ({ endTime, fundsRecipient, reservePrice, startTime, startingPrice, tokenId }: {
        endTime: Timestamp;
        fundsRecipient?: string;
        reservePrice?: Coin;
        startTime: Timestamp;
        startingPrice: Coin;
        tokenId: string;
    }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
    setAuctionBid: ({ price, tokenId }: {
        price: Coin;
        tokenId: string;
    }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
    closeAuction: ({ acceptHighestBid, tokenId }: {
        acceptHighestBid: boolean;
        tokenId: string;
    }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
    finalizeAuction: ({ tokenId }: {
        tokenId: string;
    }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
    voidAuction: ({ tokenId }: {
        tokenId: string;
    }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
}
export declare class AuctionEnglishClient extends AuctionEnglishQueryClient implements AuctionEnglishInterface {
    client: SigningCosmWasmClient;
    sender: string;
    contractAddress: string;
    constructor(client: SigningCosmWasmClient, sender: string, contractAddress: string);
    updateConfig: ({ bufferDuration, closedDuration, collectorAddress, maxDuration, minBidIncrement, minDuration, minPrice, operators, tradingFeeBps }: {
        bufferDuration?: number;
        closedDuration?: number;
        collectorAddress?: string;
        maxDuration?: number;
        minBidIncrement?: Uint128;
        minDuration?: number;
        minPrice?: Uint128;
        operators?: string[];
        tradingFeeBps?: number;
    }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
    setAuction: ({ endTime, fundsRecipient, reservePrice, startTime, startingPrice, tokenId }: {
        endTime: Timestamp;
        fundsRecipient?: string;
        reservePrice?: Coin;
        startTime: Timestamp;
        startingPrice: Coin;
        tokenId: string;
    }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
    setAuctionBid: ({ price, tokenId }: {
        price: Coin;
        tokenId: string;
    }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
    closeAuction: ({ acceptHighestBid, tokenId }: {
        acceptHighestBid: boolean;
        tokenId: string;
    }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
    finalizeAuction: ({ tokenId }: {
        tokenId: string;
    }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
    voidAuction: ({ tokenId }: {
        tokenId: string;
    }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
}

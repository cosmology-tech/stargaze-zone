"use strict";
/**
* This file was automatically generated by @cosmwasm/ts-codegen@1.11.1.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/
Object.defineProperty(exports, "__esModule", { value: true });
exports.AuctionEnglishMsgComposer = void 0;
const tx_1 = require("cosmjs-types/cosmwasm/wasm/v1/tx");
const encoding_1 = require("@cosmjs/encoding");
class AuctionEnglishMsgComposer {
    sender;
    contractAddress;
    constructor(sender, contractAddress) {
        this.sender = sender;
        this.contractAddress = contractAddress;
        this.updateConfig = this.updateConfig.bind(this);
        this.setAuction = this.setAuction.bind(this);
        this.setAuctionBid = this.setAuctionBid.bind(this);
        this.closeAuction = this.closeAuction.bind(this);
        this.finalizeAuction = this.finalizeAuction.bind(this);
        this.voidAuction = this.voidAuction.bind(this);
    }
    updateConfig = ({ bufferDuration, closedDuration, collectorAddress, maxDuration, minBidIncrement, minDuration, minPrice, operators, tradingFeeBps }, _funds) => {
        return {
            typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
            value: tx_1.MsgExecuteContract.fromPartial({
                sender: this.sender,
                contract: this.contractAddress,
                msg: (0, encoding_1.toUtf8)(JSON.stringify({
                    update_config: {
                        buffer_duration: bufferDuration,
                        closed_duration: closedDuration,
                        collector_address: collectorAddress,
                        max_duration: maxDuration,
                        min_bid_increment: minBidIncrement,
                        min_duration: minDuration,
                        min_price: minPrice,
                        operators,
                        trading_fee_bps: tradingFeeBps
                    }
                })),
                funds: _funds
            })
        };
    };
    setAuction = ({ endTime, fundsRecipient, reservePrice, startTime, startingPrice, tokenId }, _funds) => {
        return {
            typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
            value: tx_1.MsgExecuteContract.fromPartial({
                sender: this.sender,
                contract: this.contractAddress,
                msg: (0, encoding_1.toUtf8)(JSON.stringify({
                    set_auction: {
                        end_time: endTime,
                        funds_recipient: fundsRecipient,
                        reserve_price: reservePrice,
                        start_time: startTime,
                        starting_price: startingPrice,
                        token_id: tokenId
                    }
                })),
                funds: _funds
            })
        };
    };
    setAuctionBid = ({ price, tokenId }, _funds) => {
        return {
            typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
            value: tx_1.MsgExecuteContract.fromPartial({
                sender: this.sender,
                contract: this.contractAddress,
                msg: (0, encoding_1.toUtf8)(JSON.stringify({
                    set_auction_bid: {
                        price,
                        token_id: tokenId
                    }
                })),
                funds: _funds
            })
        };
    };
    closeAuction = ({ acceptHighestBid, tokenId }, _funds) => {
        return {
            typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
            value: tx_1.MsgExecuteContract.fromPartial({
                sender: this.sender,
                contract: this.contractAddress,
                msg: (0, encoding_1.toUtf8)(JSON.stringify({
                    close_auction: {
                        accept_highest_bid: acceptHighestBid,
                        token_id: tokenId
                    }
                })),
                funds: _funds
            })
        };
    };
    finalizeAuction = ({ tokenId }, _funds) => {
        return {
            typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
            value: tx_1.MsgExecuteContract.fromPartial({
                sender: this.sender,
                contract: this.contractAddress,
                msg: (0, encoding_1.toUtf8)(JSON.stringify({
                    finalize_auction: {
                        token_id: tokenId
                    }
                })),
                funds: _funds
            })
        };
    };
    voidAuction = ({ tokenId }, _funds) => {
        return {
            typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
            value: tx_1.MsgExecuteContract.fromPartial({
                sender: this.sender,
                contract: this.contractAddress,
                msg: (0, encoding_1.toUtf8)(JSON.stringify({
                    void_auction: {
                        token_id: tokenId
                    }
                })),
                funds: _funds
            })
        };
    };
}
exports.AuctionEnglishMsgComposer = AuctionEnglishMsgComposer;
//# sourceMappingURL=AuctionEnglish.message-composer.js.map
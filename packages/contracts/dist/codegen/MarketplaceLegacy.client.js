"use strict";
/**
* This file was automatically generated by @cosmwasm/ts-codegen@1.11.1.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/
Object.defineProperty(exports, "__esModule", { value: true });
exports.MarketplaceLegacyClient = exports.MarketplaceLegacyQueryClient = void 0;
class MarketplaceLegacyQueryClient {
    client;
    contractAddress;
    constructor(client, contractAddress) {
        this.client = client;
        this.contractAddress = contractAddress;
        this.config = this.config.bind(this);
        this.token = this.token.bind(this);
        this.rangeTokens = this.rangeTokens.bind(this);
        this.listTokens = this.listTokens.bind(this);
        this.listTokensOnSale = this.listTokensOnSale.bind(this);
    }
    config = async () => {
        return this.client.queryContractSmart(this.contractAddress, {
            config: {}
        });
    };
    token = async ({ id }) => {
        return this.client.queryContractSmart(this.contractAddress, {
            token: {
                id
            }
        });
    };
    rangeTokens = async ({ limit, startAfter }) => {
        return this.client.queryContractSmart(this.contractAddress, {
            range_tokens: {
                limit,
                start_after: startAfter
            }
        });
    };
    listTokens = async ({ ids }) => {
        return this.client.queryContractSmart(this.contractAddress, {
            list_tokens: {
                ids
            }
        });
    };
    listTokensOnSale = async ({ limit, startAfter }) => {
        return this.client.queryContractSmart(this.contractAddress, {
            list_tokens_on_sale: {
                limit,
                start_after: startAfter
            }
        });
    };
}
exports.MarketplaceLegacyQueryClient = MarketplaceLegacyQueryClient;
class MarketplaceLegacyClient extends MarketplaceLegacyQueryClient {
    client;
    sender;
    contractAddress;
    constructor(client, sender, contractAddress) {
        super(client, contractAddress);
        this.client = client;
        this.sender = sender;
        this.contractAddress = contractAddress;
        this.buy = this.buy.bind(this);
        this.listTokens = this.listTokens.bind(this);
        this.delistTokens = this.delistTokens.bind(this);
        this.updatePrice = this.updatePrice.bind(this);
        this.updateConfig = this.updateConfig.bind(this);
    }
    buy = async ({ recipient, tokenId }, fee = "auto", memo, _funds) => {
        return await this.client.execute(this.sender, this.contractAddress, {
            buy: {
                recipient,
                token_id: tokenId
            }
        }, fee, memo, _funds);
    };
    listTokens = async ({ tokens }, fee = "auto", memo, _funds) => {
        return await this.client.execute(this.sender, this.contractAddress, {
            list_tokens: {
                tokens
            }
        }, fee, memo, _funds);
    };
    delistTokens = async ({ tokens }, fee = "auto", memo, _funds) => {
        return await this.client.execute(this.sender, this.contractAddress, {
            delist_tokens: {
                tokens
            }
        }, fee, memo, _funds);
    };
    updatePrice = async ({ price, token }, fee = "auto", memo, _funds) => {
        return await this.client.execute(this.sender, this.contractAddress, {
            update_price: {
                price,
                token
            }
        }, fee, memo, _funds);
    };
    updateConfig = async ({ admin, allowedNative, collectorAddr, feePercentage, nftAddr }, fee = "auto", memo, _funds) => {
        return await this.client.execute(this.sender, this.contractAddress, {
            update_config: {
                admin,
                allowed_native: allowedNative,
                collector_addr: collectorAddr,
                fee_percentage: feePercentage,
                nft_addr: nftAddr
            }
        }, fee, memo, _funds);
    };
}
exports.MarketplaceLegacyClient = MarketplaceLegacyClient;
//# sourceMappingURL=MarketplaceLegacy.client.js.map
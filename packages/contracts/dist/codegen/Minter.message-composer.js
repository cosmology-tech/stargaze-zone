"use strict";
/**
* This file was automatically generated by @cosmwasm/ts-codegen@1.11.1.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/
Object.defineProperty(exports, "__esModule", { value: true });
exports.MinterMsgComposer = void 0;
const tx_1 = require("cosmjs-types/cosmwasm/wasm/v1/tx");
const encoding_1 = require("@cosmjs/encoding");
class MinterMsgComposer {
    sender;
    contractAddress;
    constructor(sender, contractAddress) {
        this.sender = sender;
        this.contractAddress = contractAddress;
        this.mint = this.mint.bind(this);
        this.setWhitelist = this.setWhitelist.bind(this);
        this.updateStartTime = this.updateStartTime.bind(this);
        this.updatePerAddressLimit = this.updatePerAddressLimit.bind(this);
        this.mintTo = this.mintTo.bind(this);
        this.mintFor = this.mintFor.bind(this);
        this.withdraw = this.withdraw.bind(this);
    }
    mint = (_funds) => {
        return {
            typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
            value: tx_1.MsgExecuteContract.fromPartial({
                sender: this.sender,
                contract: this.contractAddress,
                msg: (0, encoding_1.toUtf8)(JSON.stringify({
                    mint: {}
                })),
                funds: _funds
            })
        };
    };
    setWhitelist = ({ whitelist }, _funds) => {
        return {
            typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
            value: tx_1.MsgExecuteContract.fromPartial({
                sender: this.sender,
                contract: this.contractAddress,
                msg: (0, encoding_1.toUtf8)(JSON.stringify({
                    set_whitelist: {
                        whitelist
                    }
                })),
                funds: _funds
            })
        };
    };
    updateStartTime = (_funds) => {
        return {
            typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
            value: tx_1.MsgExecuteContract.fromPartial({
                sender: this.sender,
                contract: this.contractAddress,
                msg: (0, encoding_1.toUtf8)(JSON.stringify({
                    update_start_time: {}
                })),
                funds: _funds
            })
        };
    };
    updatePerAddressLimit = ({ perAddressLimit }, _funds) => {
        return {
            typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
            value: tx_1.MsgExecuteContract.fromPartial({
                sender: this.sender,
                contract: this.contractAddress,
                msg: (0, encoding_1.toUtf8)(JSON.stringify({
                    update_per_address_limit: {
                        per_address_limit: perAddressLimit
                    }
                })),
                funds: _funds
            })
        };
    };
    mintTo = ({ recipient }, _funds) => {
        return {
            typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
            value: tx_1.MsgExecuteContract.fromPartial({
                sender: this.sender,
                contract: this.contractAddress,
                msg: (0, encoding_1.toUtf8)(JSON.stringify({
                    mint_to: {
                        recipient
                    }
                })),
                funds: _funds
            })
        };
    };
    mintFor = ({ recipient, tokenId }, _funds) => {
        return {
            typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
            value: tx_1.MsgExecuteContract.fromPartial({
                sender: this.sender,
                contract: this.contractAddress,
                msg: (0, encoding_1.toUtf8)(JSON.stringify({
                    mint_for: {
                        recipient,
                        token_id: tokenId
                    }
                })),
                funds: _funds
            })
        };
    };
    withdraw = (_funds) => {
        return {
            typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
            value: tx_1.MsgExecuteContract.fromPartial({
                sender: this.sender,
                contract: this.contractAddress,
                msg: (0, encoding_1.toUtf8)(JSON.stringify({
                    withdraw: {}
                })),
                funds: _funds
            })
        };
    };
}
exports.MinterMsgComposer = MinterMsgComposer;
//# sourceMappingURL=Minter.message-composer.js.map
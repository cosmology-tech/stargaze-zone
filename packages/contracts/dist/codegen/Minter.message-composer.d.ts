/**
* This file was automatically generated by @cosmwasm/ts-codegen@1.11.1.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/
import { MsgExecuteContractEncodeObject } from "@cosmjs/cosmwasm-stargate";
import { Coin } from "./Minter.types";
export interface MinterMsg {
    contractAddress: string;
    sender: string;
    mint: (_funds?: Coin[]) => MsgExecuteContractEncodeObject;
    setWhitelist: ({ whitelist }: {
        whitelist: string;
    }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
    updateStartTime: (_funds?: Coin[]) => MsgExecuteContractEncodeObject;
    updatePerAddressLimit: ({ perAddressLimit }: {
        perAddressLimit: number;
    }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
    mintTo: ({ recipient }: {
        recipient: string;
    }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
    mintFor: ({ recipient, tokenId }: {
        recipient: string;
        tokenId: number;
    }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
    withdraw: (_funds?: Coin[]) => MsgExecuteContractEncodeObject;
}
export declare class MinterMsgComposer implements MinterMsg {
    sender: string;
    contractAddress: string;
    constructor(sender: string, contractAddress: string);
    mint: (_funds?: Coin[]) => MsgExecuteContractEncodeObject;
    setWhitelist: ({ whitelist }: {
        whitelist: string;
    }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
    updateStartTime: (_funds?: Coin[]) => MsgExecuteContractEncodeObject;
    updatePerAddressLimit: ({ perAddressLimit }: {
        perAddressLimit: number;
    }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
    mintTo: ({ recipient }: {
        recipient: string;
    }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
    mintFor: ({ recipient, tokenId }: {
        recipient: string;
        tokenId: number;
    }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
    withdraw: (_funds?: Coin[]) => MsgExecuteContractEncodeObject;
}

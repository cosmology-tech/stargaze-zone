/**
* This file was automatically generated by @cosmwasm/ts-codegen@1.11.1.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/
import { CosmWasmClient, SigningCosmWasmClient, ExecuteResult } from "@cosmjs/cosmwasm-stargate";
import { StdFee } from "@cosmjs/amino";
import { ConfigResponse, Coin } from "./Minter.types";
export interface MinterReadOnlyInterface {
    contractAddress: string;
    config: () => Promise<ConfigResponse>;
    mintableNumTokens: () => Promise<MintableNumTokensResponse>;
    startTime: () => Promise<StartTimeResponse>;
    mintPrice: () => Promise<MintPriceResponse>;
    mintCount: ({ address }: {
        address: string;
    }) => Promise<MintCountResponse>;
}
export declare class MinterQueryClient implements MinterReadOnlyInterface {
    client: CosmWasmClient;
    contractAddress: string;
    constructor(client: CosmWasmClient, contractAddress: string);
    config: () => Promise<ConfigResponse>;
    mintableNumTokens: () => Promise<MintableNumTokensResponse>;
    startTime: () => Promise<StartTimeResponse>;
    mintPrice: () => Promise<MintPriceResponse>;
    mintCount: ({ address }: {
        address: string;
    }) => Promise<MintCountResponse>;
}
export interface MinterInterface extends MinterReadOnlyInterface {
    contractAddress: string;
    sender: string;
    mint: (fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
    setWhitelist: ({ whitelist }: {
        whitelist: string;
    }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
    updateStartTime: (fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
    updatePerAddressLimit: ({ perAddressLimit }: {
        perAddressLimit: number;
    }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
    mintTo: ({ recipient }: {
        recipient: string;
    }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
    mintFor: ({ recipient, tokenId }: {
        recipient: string;
        tokenId: number;
    }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
    withdraw: (fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
}
export declare class MinterClient extends MinterQueryClient implements MinterInterface {
    client: SigningCosmWasmClient;
    sender: string;
    contractAddress: string;
    constructor(client: SigningCosmWasmClient, sender: string, contractAddress: string);
    mint: (fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
    setWhitelist: ({ whitelist }: {
        whitelist: string;
    }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
    updateStartTime: (fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
    updatePerAddressLimit: ({ perAddressLimit }: {
        perAddressLimit: number;
    }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
    mintTo: ({ recipient }: {
        recipient: string;
    }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
    mintFor: ({ recipient, tokenId }: {
        recipient: string;
        tokenId: number;
    }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
    withdraw: (fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
}

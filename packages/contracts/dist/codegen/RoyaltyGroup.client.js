"use strict";
/**
* This file was automatically generated by @cosmwasm/ts-codegen@1.11.1.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/
Object.defineProperty(exports, "__esModule", { value: true });
exports.RoyaltyGroupClient = exports.RoyaltyGroupQueryClient = void 0;
class RoyaltyGroupQueryClient {
    client;
    contractAddress;
    constructor(client, contractAddress) {
        this.client = client;
        this.contractAddress = contractAddress;
        this.admin = this.admin.bind(this);
        this.totalWeight = this.totalWeight.bind(this);
        this.listMembers = this.listMembers.bind(this);
        this.member = this.member.bind(this);
        this.hooks = this.hooks.bind(this);
    }
    admin = async () => {
        return this.client.queryContractSmart(this.contractAddress, {
            admin: {}
        });
    };
    totalWeight = async () => {
        return this.client.queryContractSmart(this.contractAddress, {
            total_weight: {}
        });
    };
    listMembers = async ({ limit, startAfter }) => {
        return this.client.queryContractSmart(this.contractAddress, {
            list_members: {
                limit,
                start_after: startAfter
            }
        });
    };
    member = async ({ addr, atHeight }) => {
        return this.client.queryContractSmart(this.contractAddress, {
            member: {
                addr,
                at_height: atHeight
            }
        });
    };
    hooks = async () => {
        return this.client.queryContractSmart(this.contractAddress, {
            hooks: {}
        });
    };
}
exports.RoyaltyGroupQueryClient = RoyaltyGroupQueryClient;
class RoyaltyGroupClient extends RoyaltyGroupQueryClient {
    client;
    sender;
    contractAddress;
    constructor(client, sender, contractAddress) {
        super(client, contractAddress);
        this.client = client;
        this.sender = sender;
        this.contractAddress = contractAddress;
        this.updateAdmin = this.updateAdmin.bind(this);
        this.updateMembers = this.updateMembers.bind(this);
        this.addHook = this.addHook.bind(this);
        this.removeHook = this.removeHook.bind(this);
        this.distribute = this.distribute.bind(this);
    }
    updateAdmin = async ({ admin }, fee = "auto", memo, _funds) => {
        return await this.client.execute(this.sender, this.contractAddress, {
            update_admin: {
                admin
            }
        }, fee, memo, _funds);
    };
    updateMembers = async ({ add, remove }, fee = "auto", memo, _funds) => {
        return await this.client.execute(this.sender, this.contractAddress, {
            update_members: {
                add,
                remove
            }
        }, fee, memo, _funds);
    };
    addHook = async ({ addr }, fee = "auto", memo, _funds) => {
        return await this.client.execute(this.sender, this.contractAddress, {
            add_hook: {
                addr
            }
        }, fee, memo, _funds);
    };
    removeHook = async ({ addr }, fee = "auto", memo, _funds) => {
        return await this.client.execute(this.sender, this.contractAddress, {
            remove_hook: {
                addr
            }
        }, fee, memo, _funds);
    };
    distribute = async ({ funds }, fee = "auto", memo, _funds) => {
        return await this.client.execute(this.sender, this.contractAddress, {
            distribute: {
                funds
            }
        }, fee, memo, _funds);
    };
}
exports.RoyaltyGroupClient = RoyaltyGroupClient;
//# sourceMappingURL=RoyaltyGroup.client.js.map
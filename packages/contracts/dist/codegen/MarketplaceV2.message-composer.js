"use strict";
/**
* This file was automatically generated by @cosmwasm/ts-codegen@1.11.1.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/
Object.defineProperty(exports, "__esModule", { value: true });
exports.MarketplaceV2MsgComposer = void 0;
const tx_1 = require("cosmjs-types/cosmwasm/wasm/v1/tx");
const encoding_1 = require("@cosmjs/encoding");
class MarketplaceV2MsgComposer {
    sender;
    contractAddress;
    constructor(sender, contractAddress) {
        this.sender = sender;
        this.contractAddress = contractAddress;
        this.updateConfig = this.updateConfig.bind(this);
        this.setAsk = this.setAsk.bind(this);
        this.removeAsk = this.removeAsk.bind(this);
        this.setBid = this.setBid.bind(this);
        this.removeBid = this.removeBid.bind(this);
        this.acceptBid = this.acceptBid.bind(this);
        this.setCollectionBid = this.setCollectionBid.bind(this);
        this.removeCollectionBid = this.removeCollectionBid.bind(this);
        this.acceptCollectionBid = this.acceptCollectionBid.bind(this);
    }
    updateConfig = ({ askExpiry, bidExpiry, minPrice, operators, tradingFeeBps }, _funds) => {
        return {
            typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
            value: tx_1.MsgExecuteContract.fromPartial({
                sender: this.sender,
                contract: this.contractAddress,
                msg: (0, encoding_1.toUtf8)(JSON.stringify({
                    update_config: {
                        ask_expiry: askExpiry,
                        bid_expiry: bidExpiry,
                        min_price: minPrice,
                        operators,
                        trading_fee_bps: tradingFeeBps
                    }
                })),
                funds: _funds
            })
        };
    };
    setAsk = ({ expiresAt, fundsRecipient, price, reserveFor, tokenId }, _funds) => {
        return {
            typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
            value: tx_1.MsgExecuteContract.fromPartial({
                sender: this.sender,
                contract: this.contractAddress,
                msg: (0, encoding_1.toUtf8)(JSON.stringify({
                    set_ask: {
                        expires_at: expiresAt,
                        funds_recipient: fundsRecipient,
                        price,
                        reserve_for: reserveFor,
                        token_id: tokenId
                    }
                })),
                funds: _funds
            })
        };
    };
    removeAsk = ({ tokenId }, _funds) => {
        return {
            typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
            value: tx_1.MsgExecuteContract.fromPartial({
                sender: this.sender,
                contract: this.contractAddress,
                msg: (0, encoding_1.toUtf8)(JSON.stringify({
                    remove_ask: {
                        token_id: tokenId
                    }
                })),
                funds: _funds
            })
        };
    };
    setBid = ({ expiresAt, price, tokenId }, _funds) => {
        return {
            typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
            value: tx_1.MsgExecuteContract.fromPartial({
                sender: this.sender,
                contract: this.contractAddress,
                msg: (0, encoding_1.toUtf8)(JSON.stringify({
                    set_bid: {
                        expires_at: expiresAt,
                        price,
                        token_id: tokenId
                    }
                })),
                funds: _funds
            })
        };
    };
    removeBid = ({ tokenId }, _funds) => {
        return {
            typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
            value: tx_1.MsgExecuteContract.fromPartial({
                sender: this.sender,
                contract: this.contractAddress,
                msg: (0, encoding_1.toUtf8)(JSON.stringify({
                    remove_bid: {
                        token_id: tokenId
                    }
                })),
                funds: _funds
            })
        };
    };
    acceptBid = ({ bidder, tokenId }, _funds) => {
        return {
            typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
            value: tx_1.MsgExecuteContract.fromPartial({
                sender: this.sender,
                contract: this.contractAddress,
                msg: (0, encoding_1.toUtf8)(JSON.stringify({
                    accept_bid: {
                        bidder,
                        token_id: tokenId
                    }
                })),
                funds: _funds
            })
        };
    };
    setCollectionBid = ({ expiresAt, price, units }, _funds) => {
        return {
            typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
            value: tx_1.MsgExecuteContract.fromPartial({
                sender: this.sender,
                contract: this.contractAddress,
                msg: (0, encoding_1.toUtf8)(JSON.stringify({
                    set_collection_bid: {
                        expires_at: expiresAt,
                        price,
                        units
                    }
                })),
                funds: _funds
            })
        };
    };
    removeCollectionBid = (_funds) => {
        return {
            typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
            value: tx_1.MsgExecuteContract.fromPartial({
                sender: this.sender,
                contract: this.contractAddress,
                msg: (0, encoding_1.toUtf8)(JSON.stringify({
                    remove_collection_bid: {}
                })),
                funds: _funds
            })
        };
    };
    acceptCollectionBid = ({ bidder, tokenId }, _funds) => {
        return {
            typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
            value: tx_1.MsgExecuteContract.fromPartial({
                sender: this.sender,
                contract: this.contractAddress,
                msg: (0, encoding_1.toUtf8)(JSON.stringify({
                    accept_collection_bid: {
                        bidder,
                        token_id: tokenId
                    }
                })),
                funds: _funds
            })
        };
    };
}
exports.MarketplaceV2MsgComposer = MarketplaceV2MsgComposer;
//# sourceMappingURL=MarketplaceV2.message-composer.js.map
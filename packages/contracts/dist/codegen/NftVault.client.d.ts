/**
* This file was automatically generated by @cosmwasm/ts-codegen@1.11.1.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/
import { CosmWasmClient, SigningCosmWasmClient, ExecuteResult } from "@cosmjs/cosmwasm-stargate";
import { Coin, StdFee } from "@cosmjs/amino";
import { ConfigResponse, QueryOptionsForTokenTimestampOffset } from "./NftVault.types";
export interface NftVaultReadOnlyInterface {
    contractAddress: string;
    config: () => Promise<ConfigResponse>;
    stakeHooks: () => Promise<StakeHooksResponse>;
    unstakeHooks: () => Promise<UnstakeHooksResponse>;
    withdrawHooks: () => Promise<WithdrawHooksResponse>;
    vaultToken: ({ tokenId }: {
        tokenId: string;
    }) => Promise<VaultTokenResponse>;
    vaultTokensByOwner: ({ owner, queryOptions }: {
        owner: string;
        queryOptions: QueryOptionsForTokenTimestampOffset;
    }) => Promise<VaultTokensByOwnerResponse>;
    vaultTokensByStakeTimestamp: ({ queryOptions }: {
        queryOptions: QueryOptionsForTokenTimestampOffset;
    }) => Promise<VaultTokensByStakeTimestampResponse>;
    vaultTokensByUnstakeTimestamp: ({ queryOptions }: {
        queryOptions: QueryOptionsForTokenTimestampOffset;
    }) => Promise<VaultTokensByUnstakeTimestampResponse>;
}
export declare class NftVaultQueryClient implements NftVaultReadOnlyInterface {
    client: CosmWasmClient;
    contractAddress: string;
    constructor(client: CosmWasmClient, contractAddress: string);
    config: () => Promise<ConfigResponse>;
    stakeHooks: () => Promise<StakeHooksResponse>;
    unstakeHooks: () => Promise<UnstakeHooksResponse>;
    withdrawHooks: () => Promise<WithdrawHooksResponse>;
    vaultToken: ({ tokenId }: {
        tokenId: string;
    }) => Promise<VaultTokenResponse>;
    vaultTokensByOwner: ({ owner, queryOptions }: {
        owner: string;
        queryOptions: QueryOptionsForTokenTimestampOffset;
    }) => Promise<VaultTokensByOwnerResponse>;
    vaultTokensByStakeTimestamp: ({ queryOptions }: {
        queryOptions: QueryOptionsForTokenTimestampOffset;
    }) => Promise<VaultTokensByStakeTimestampResponse>;
    vaultTokensByUnstakeTimestamp: ({ queryOptions }: {
        queryOptions: QueryOptionsForTokenTimestampOffset;
    }) => Promise<VaultTokensByUnstakeTimestampResponse>;
}
export interface NftVaultInterface extends NftVaultReadOnlyInterface {
    contractAddress: string;
    sender: string;
    updateConfig: ({ label, operators, unstakePeriod }: {
        label?: string;
        operators?: string[];
        unstakePeriod?: number;
    }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
    addStakeHook: ({ hook }: {
        hook: string;
    }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
    removeStakeHook: ({ hook }: {
        hook: string;
    }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
    addUnstakeHook: ({ hook }: {
        hook: string;
    }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
    removeUnstakeHook: ({ hook }: {
        hook: string;
    }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
    addWithdrawHook: ({ hook }: {
        hook: string;
    }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
    removeWithdrawHook: ({ hook }: {
        hook: string;
    }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
    stake: ({ tokenId }: {
        tokenId: string;
    }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
    unstake: ({ tokenId }: {
        tokenId: string;
    }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
    withdraw: ({ tokenId }: {
        tokenId: string;
    }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
}
export declare class NftVaultClient extends NftVaultQueryClient implements NftVaultInterface {
    client: SigningCosmWasmClient;
    sender: string;
    contractAddress: string;
    constructor(client: SigningCosmWasmClient, sender: string, contractAddress: string);
    updateConfig: ({ label, operators, unstakePeriod }: {
        label?: string;
        operators?: string[];
        unstakePeriod?: number;
    }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
    addStakeHook: ({ hook }: {
        hook: string;
    }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
    removeStakeHook: ({ hook }: {
        hook: string;
    }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
    addUnstakeHook: ({ hook }: {
        hook: string;
    }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
    removeUnstakeHook: ({ hook }: {
        hook: string;
    }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
    addWithdrawHook: ({ hook }: {
        hook: string;
    }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
    removeWithdrawHook: ({ hook }: {
        hook: string;
    }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
    stake: ({ tokenId }: {
        tokenId: string;
    }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
    unstake: ({ tokenId }: {
        tokenId: string;
    }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
    withdraw: ({ tokenId }: {
        tokenId: string;
    }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
}

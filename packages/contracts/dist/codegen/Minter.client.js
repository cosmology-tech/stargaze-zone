"use strict";
/**
* This file was automatically generated by @cosmwasm/ts-codegen@1.11.1.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/
Object.defineProperty(exports, "__esModule", { value: true });
exports.MinterClient = exports.MinterQueryClient = void 0;
class MinterQueryClient {
    client;
    contractAddress;
    constructor(client, contractAddress) {
        this.client = client;
        this.contractAddress = contractAddress;
        this.config = this.config.bind(this);
        this.mintableNumTokens = this.mintableNumTokens.bind(this);
        this.startTime = this.startTime.bind(this);
        this.mintPrice = this.mintPrice.bind(this);
        this.mintCount = this.mintCount.bind(this);
    }
    config = async () => {
        return this.client.queryContractSmart(this.contractAddress, {
            config: {}
        });
    };
    mintableNumTokens = async () => {
        return this.client.queryContractSmart(this.contractAddress, {
            mintable_num_tokens: {}
        });
    };
    startTime = async () => {
        return this.client.queryContractSmart(this.contractAddress, {
            start_time: {}
        });
    };
    mintPrice = async () => {
        return this.client.queryContractSmart(this.contractAddress, {
            mint_price: {}
        });
    };
    mintCount = async ({ address }) => {
        return this.client.queryContractSmart(this.contractAddress, {
            mint_count: {
                address
            }
        });
    };
}
exports.MinterQueryClient = MinterQueryClient;
class MinterClient extends MinterQueryClient {
    client;
    sender;
    contractAddress;
    constructor(client, sender, contractAddress) {
        super(client, contractAddress);
        this.client = client;
        this.sender = sender;
        this.contractAddress = contractAddress;
        this.mint = this.mint.bind(this);
        this.setWhitelist = this.setWhitelist.bind(this);
        this.updateStartTime = this.updateStartTime.bind(this);
        this.updatePerAddressLimit = this.updatePerAddressLimit.bind(this);
        this.mintTo = this.mintTo.bind(this);
        this.mintFor = this.mintFor.bind(this);
        this.withdraw = this.withdraw.bind(this);
    }
    mint = async (fee = "auto", memo, _funds) => {
        return await this.client.execute(this.sender, this.contractAddress, {
            mint: {}
        }, fee, memo, _funds);
    };
    setWhitelist = async ({ whitelist }, fee = "auto", memo, _funds) => {
        return await this.client.execute(this.sender, this.contractAddress, {
            set_whitelist: {
                whitelist
            }
        }, fee, memo, _funds);
    };
    updateStartTime = async (fee = "auto", memo, _funds) => {
        return await this.client.execute(this.sender, this.contractAddress, {
            update_start_time: {}
        }, fee, memo, _funds);
    };
    updatePerAddressLimit = async ({ perAddressLimit }, fee = "auto", memo, _funds) => {
        return await this.client.execute(this.sender, this.contractAddress, {
            update_per_address_limit: {
                per_address_limit: perAddressLimit
            }
        }, fee, memo, _funds);
    };
    mintTo = async ({ recipient }, fee = "auto", memo, _funds) => {
        return await this.client.execute(this.sender, this.contractAddress, {
            mint_to: {
                recipient
            }
        }, fee, memo, _funds);
    };
    mintFor = async ({ recipient, tokenId }, fee = "auto", memo, _funds) => {
        return await this.client.execute(this.sender, this.contractAddress, {
            mint_for: {
                recipient,
                token_id: tokenId
            }
        }, fee, memo, _funds);
    };
    withdraw = async (fee = "auto", memo, _funds) => {
        return await this.client.execute(this.sender, this.contractAddress, {
            withdraw: {}
        }, fee, memo, _funds);
    };
}
exports.MinterClient = MinterClient;
//# sourceMappingURL=Minter.client.js.map
"use strict";
/**
* This file was automatically generated by @cosmwasm/ts-codegen@1.11.1.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/
Object.defineProperty(exports, "__esModule", { value: true });
exports.NftVaultMsgComposer = void 0;
const tx_1 = require("cosmjs-types/cosmwasm/wasm/v1/tx");
const encoding_1 = require("@cosmjs/encoding");
class NftVaultMsgComposer {
    sender;
    contractAddress;
    constructor(sender, contractAddress) {
        this.sender = sender;
        this.contractAddress = contractAddress;
        this.updateConfig = this.updateConfig.bind(this);
        this.addStakeHook = this.addStakeHook.bind(this);
        this.removeStakeHook = this.removeStakeHook.bind(this);
        this.addUnstakeHook = this.addUnstakeHook.bind(this);
        this.removeUnstakeHook = this.removeUnstakeHook.bind(this);
        this.addWithdrawHook = this.addWithdrawHook.bind(this);
        this.removeWithdrawHook = this.removeWithdrawHook.bind(this);
        this.stake = this.stake.bind(this);
        this.unstake = this.unstake.bind(this);
        this.withdraw = this.withdraw.bind(this);
    }
    updateConfig = ({ label, operators, unstakePeriod }, _funds) => {
        return {
            typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
            value: tx_1.MsgExecuteContract.fromPartial({
                sender: this.sender,
                contract: this.contractAddress,
                msg: (0, encoding_1.toUtf8)(JSON.stringify({
                    update_config: {
                        label,
                        operators,
                        unstake_period: unstakePeriod
                    }
                })),
                funds: _funds
            })
        };
    };
    addStakeHook = ({ hook }, _funds) => {
        return {
            typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
            value: tx_1.MsgExecuteContract.fromPartial({
                sender: this.sender,
                contract: this.contractAddress,
                msg: (0, encoding_1.toUtf8)(JSON.stringify({
                    add_stake_hook: {
                        hook
                    }
                })),
                funds: _funds
            })
        };
    };
    removeStakeHook = ({ hook }, _funds) => {
        return {
            typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
            value: tx_1.MsgExecuteContract.fromPartial({
                sender: this.sender,
                contract: this.contractAddress,
                msg: (0, encoding_1.toUtf8)(JSON.stringify({
                    remove_stake_hook: {
                        hook
                    }
                })),
                funds: _funds
            })
        };
    };
    addUnstakeHook = ({ hook }, _funds) => {
        return {
            typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
            value: tx_1.MsgExecuteContract.fromPartial({
                sender: this.sender,
                contract: this.contractAddress,
                msg: (0, encoding_1.toUtf8)(JSON.stringify({
                    add_unstake_hook: {
                        hook
                    }
                })),
                funds: _funds
            })
        };
    };
    removeUnstakeHook = ({ hook }, _funds) => {
        return {
            typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
            value: tx_1.MsgExecuteContract.fromPartial({
                sender: this.sender,
                contract: this.contractAddress,
                msg: (0, encoding_1.toUtf8)(JSON.stringify({
                    remove_unstake_hook: {
                        hook
                    }
                })),
                funds: _funds
            })
        };
    };
    addWithdrawHook = ({ hook }, _funds) => {
        return {
            typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
            value: tx_1.MsgExecuteContract.fromPartial({
                sender: this.sender,
                contract: this.contractAddress,
                msg: (0, encoding_1.toUtf8)(JSON.stringify({
                    add_withdraw_hook: {
                        hook
                    }
                })),
                funds: _funds
            })
        };
    };
    removeWithdrawHook = ({ hook }, _funds) => {
        return {
            typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
            value: tx_1.MsgExecuteContract.fromPartial({
                sender: this.sender,
                contract: this.contractAddress,
                msg: (0, encoding_1.toUtf8)(JSON.stringify({
                    remove_withdraw_hook: {
                        hook
                    }
                })),
                funds: _funds
            })
        };
    };
    stake = ({ tokenId }, _funds) => {
        return {
            typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
            value: tx_1.MsgExecuteContract.fromPartial({
                sender: this.sender,
                contract: this.contractAddress,
                msg: (0, encoding_1.toUtf8)(JSON.stringify({
                    stake: {
                        token_id: tokenId
                    }
                })),
                funds: _funds
            })
        };
    };
    unstake = ({ tokenId }, _funds) => {
        return {
            typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
            value: tx_1.MsgExecuteContract.fromPartial({
                sender: this.sender,
                contract: this.contractAddress,
                msg: (0, encoding_1.toUtf8)(JSON.stringify({
                    unstake: {
                        token_id: tokenId
                    }
                })),
                funds: _funds
            })
        };
    };
    withdraw = ({ tokenId }, _funds) => {
        return {
            typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
            value: tx_1.MsgExecuteContract.fromPartial({
                sender: this.sender,
                contract: this.contractAddress,
                msg: (0, encoding_1.toUtf8)(JSON.stringify({
                    withdraw: {
                        token_id: tokenId
                    }
                })),
                funds: _funds
            })
        };
    };
}
exports.NftVaultMsgComposer = NftVaultMsgComposer;
//# sourceMappingURL=NftVault.message-composer.js.map